{"version":3,"sources":["App.module.css","assets/logo.png","api/axiosDefaults.js","contexts/CurrentUserContext.js","components/Avatar.js","hooks/useClickOutsideToggle.js","contexts/AlertContext.js","components/NavBar.js","assets/signup.jpg","pages/auth/SignUpForm.js","assets/signin.jpg","pages/auth/SignInForm.js","components/Asset.js","pages/posts/PostCreateForm.js","components/MoreDropdown.js","pages/posts/Post.js","pages/comments/CommentCreateForm.js","pages/comments/CommentEditForm.js","pages/comments/Comment.js","contexts/UserDataContext.js","pages/users/User.js","pages/users/PopularUsers.js","utils/utils.js","pages/posts/PostPage.js","pages/posts/PostsPage.js","pages/posts/PostEditForm.js","pages/users/UserPage.js","pages/users/UsernameForm.js","pages/users/UserPasswordForm.js","pages/users/UserEditForm.js","App.js","reportWebVitals.js","components/AlertDisplay.js","index.js","styles/SignInUpForm.module.css","styles/NavBar.module.css","styles/MoreDropdown.module.css","styles/CommentCreateEditForm.module.css","styles/Post.module.css","styles/PostCreateEditForm.module.css","styles/Comment.module.css","styles/PostsPage.module.css","styles/Avatar.module.css","styles/Asset.module.css","styles/User.module.css","styles/UserPage.module.css","styles/Button.module.css"],"names":["module","exports","axios","defaults","baseURL","headers","post","withCredentials","interceptors","request","use","config","token","localStorage","getItem","error","Promise","reject","CurrentUserContext","createContext","SetCurrentUserContext","useCurrentUser","useContext","useSetCurrentUser","CurrentUserProvider","_ref","children","currentUser","setCurrentUser","useState","undefined","history","useHistory","handleMount","useCallback","async","data","get","Authorization","setItem","id","err","_err$response","response","status","refreshToken","newAccessToken","refresh","access","removeItem","push","useEffect","_jsx","Provider","value","Avatar","src","height","text","alt","_jsxs","className","styles","width","useClickOutsideToggle","expanded","setExpanded","ref","useRef","handleClickOutside","event","current","contains","target","document","addEventListener","removeEventListener","AlertContext","useAlert","AlertProvider","alerts","setAlerts","showAlert","_ref2","message","variant","timeout","Date","now","prev","setTimeout","filter","alert","removeAlert","NavBar","addPostIcon","NavLink","activeClassName","Active","to","loggedInIcons","_Fragment","onClick","handleSignOut","profile_picture","loggedOutIcons","Navbar","expand","fixed","Container","exact","Brand","logo","Toggle","Collapse","Nav","SignUpForm","_errors$username","_errors$email","_errors$password","_errors$password2","_errors$non_field_err","signUpData","setSignUpData","username","email","password1","password2","errors","setErrors","isSubmitting","setIsSubmitting","handleChange","name","prevErrors","non_field_errors","Row","Col","md","appStyles","Content","Header","Form","onSubmit","preventDefault","Group","controlId","Label","Control","Input","type","placeholder","onChange","map","idx","Alert","Button","btnStyles","Wide","Bright","disabled","Link","SignUpCol","Image","FillerImage","signUpImage","SignInForm","signInData","setSignInData","password","location","useLocation","_location$state","state","replace","res","userData","SignInCol","signInImage","Asset","spinner","Spinner","animation","PostCreateForm","_errors$title","_errors$game","_errors$content","_errors$image","postData","setPostData","title","game","content","image","imageInput","imagePreview","setImagePreview","textFields","as","rows","Blue","goBack","formData","FormData","append","files","pathname","alertMessage","_err$response2","lg","style","maxHeight","objectFit","uploadButton","htmlFor","accept","length","file","startsWith","size","URL","revokeObjectURL","newPreviewUrl","createObjectURL","ThreeDots","React","forwardRef","e","MoreDropdown","handleEdit","handleDelete","Dropdown","drop","DropdownToggle","Menu","DropdownMenu","popperConfig","strategy","Item","DropdownItem","UserEditDropdown","_ref3","Absolute","Post","props","author","author_id","updated_at","likes_count","has_liked","comments_count","postPage","setPost","is_author","localLikesCount","setLocalLikesCount","localHasLiked","setLocalHasLiked","loading","setLoading","Card","Body","Media","toLocaleString","year","month","day","hour","minute","delete","console","Img","Title","Text","PostBar","OverlayTrigger","placement","overlay","Tooltip","prevPost","prevPosts","results","pointerEvents","Heart","HeartOutline","CommentCreateForm","setContent","setComments","profilePicture","setError","trim","prevComments","InputGroup","role","CommentEditForm","setShowEditForm","formContent","setFormContent","trimmedContent","put","comment","Comment","postId","showEditForm","Author","dropdownStyles","hasOwnProperty","Math","max","UserDataContext","SetUserDataContext","useUserData","UserDataProvider","setUserData","popularUsers","pageUser","prevState","fetchPopularUsers","handleFollowToggle","userId","updatedPopularUsers","user","following_id","followers","followers_count","updatedPageUser","following","is_following","User","mobile","imageSize","showFollowButton","WordBreak","BlackOutline","PopularUsers","_popularUsers$results","hasUsers","slice","fetchMoreData","resource","setResource","next","prevResource","reduce","acc","cur","some","accResult","PostPage","useParams","comments","isMounted","commentsData","all","log","user_id","InfiniteScroll","dataLength","hasMore","loader","Redirect","PostsPage","_posts$results","posts","setPosts","hasLoaded","setHasLoaded","query","setQuery","timer","params","search","Array","isArray","fetchPosts","clearTimeout","SearchIcon","SearchBar","PostEditForm","_imageInput$current","authorId","parseInt","UserPage","_pageUser$results","_user$posts_count","userPosts","setUserPosts","pageUserData","userPostsData","fetchData","onFollowToggle","mainProfile","is_owner","noGutters","ProfilePicture","roundedCircle","onError","xs","posts_count","Black","bio","mainProfilePosts","FontAwesomeIcon","icon","faMagnifyingGlass","UsernameForm","setUsername","_currentUser$id","toString","patch","prevUser","maxLength","autoComplete","spellCheck","UserPasswordForm","_errors$new_password","_errors$new_password2","new_password1","new_password2","statusMessage","setStatusMessage","isSaveDisabled","UserEditForm","_errors$bio","_errors$profile_pictu","imageFile","submitting","setSubmitting","_imageFile$current","fluid","ProtectedRoute","component","Component","rest","Route","render","from","RedirectIfAuthenticated","NotFound","padding","textAlign","App","Main","Switch","path","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","AlertDisplay","position","top","right","zIndex","minWidth","onClose","dismissible","ReactDOM","StrictMode","Router","getElementById"],"mappings":"sFACAA,EAAOC,QAAU,CAAC,IAAM,iBAAiB,KAAO,kBAAkB,QAAU,qBAAqB,YAAc,yBAAyB,MAAQ,mB,kICDjI,MAA0B,iC,kDCQzCC,IAAMC,SAASC,QAAU,mDAEzBF,IAAMC,SAASE,QAAQC,KAAK,gBAAkB,sBAE9CJ,IAAMC,SAASI,iBAAkB,EAGjCL,IAAMM,aAAaC,QAAQC,KAAKC,IAC5B,MAAMC,EAAQC,aAAaC,QAAQ,gBAInC,OAHIF,IACAD,EAAON,QAAuB,cAAI,UAAUO,KAEzCD,CAAM,IACbI,GACOC,QAAQC,OAAOF,KAGXb,QAAK,E,OCpBb,MAAMgB,EAAqBC,0BACrBC,EAAwBD,0BAGxBE,EAAiBA,IAAMC,qBAAWJ,GAClCK,EAAoBA,IAAMD,qBAAWF,GAErCI,EAAsBC,IAAmB,IAAlB,SAAEC,GAAUD,EAE5C,MAAOE,EAAaC,GAAkBC,wBAASC,GACzCC,EAAUC,cAQVC,EAAcC,uBAAYC,UAE5B,IACI,MAAMvB,EAReC,aAAaC,QAAQ,gBAU1C,GAAIF,EACA,IAEI,MAAM,KAAEwB,SAAelC,EAAMmC,IAAI,iBAAkB,CAC/ChC,QAAS,CAAEiC,cAAe,UAAU1B,OAGxCC,aAAa0B,QAAQ,UAAWH,EAAKI,IACrCZ,EAAeQ,EACnB,CAAE,MAAOK,GAAM,IAADC,EAEV,GAA6B,OAAb,QAAZA,EAAAD,EAAIE,gBAAQ,IAAAD,OAAA,EAAZA,EAAcE,QAoBd,MAAMH,EApBwB,CAC9B,MAAMI,EArBIhC,aAAaC,QAAQ,iBAuB/B,IAAI+B,EAaA,MAAMJ,EAbQ,CAEd,MACMK,SADiB5C,EAAMI,KAAK,iBAAkB,CAAEyC,QAASF,KAC/BT,KAAKY,OACrCnC,aAAa0B,QAAQ,eAAgBO,GAGrC,MAAM,KAAEV,SAAelC,EAAMmC,IAAI,iBAAkB,CAC/ChC,QAAS,CAAEiC,cAAe,UAAUQ,OAExClB,EAAeQ,EACnB,CAIJ,CAIJ,MAGAR,EAAe,KAEvB,CAAE,MAAOa,GAEL5B,aAAaoC,WAAW,gBACxBpC,aAAaoC,WAAW,iBACxBrB,EAAe,MACfG,EAAQmB,KAAK,UACjB,IACD,CAACnB,IAQJ,OALAoB,qBAAU,KACNlB,GAAa,GACd,CAACA,IAIAmB,cAAClC,EAAmBmC,SAAQ,CAACC,MAAO3B,EAAYD,SAC5C0B,cAAChC,EAAsBiC,SAAQ,CAACC,MAAO1B,EAAeF,SACjDA,KAEqB,E,qBChEvB6B,MAfA9B,IAAiD,IAAhD,IAAE+B,EAAG,OAAEC,EAAS,GAAE,KAAEC,EAAI,IAAEC,EAAM,UAAUlC,EACtD,OACImC,eAAA,QAAAlC,SAAA,CACI0B,cAAA,OACIS,UAAWC,IAAOP,OAClBC,IAAKA,EACLC,OAAQA,EACRM,MAAON,EACPE,IAAKA,GAAOD,GAAQ,gBAEvBA,GAAQE,eAAA,QAAAlC,SAAA,CAAM,IAAEgC,EAAK,SACnB,ECIAM,MApBeA,KAC1B,MAAOC,EAAUC,GAAerC,oBAAS,GACnCsC,EAAMC,iBAAO,MAenB,OAdAjB,qBAAU,KAEN,MAAMkB,EAAsBC,IACpBH,EAAII,UAAYJ,EAAII,QAAQC,SAASF,EAAMG,SAC3CP,GAAY,EAChB,EAIJ,OADAQ,SAASC,iBAAiB,YAAaN,GAChC,KACHK,SAASE,oBAAoB,YAAaP,EAAmB,CAChE,GACF,CAACF,IAEG,CAAEF,WAAUC,cAAaC,MAAK,ECjBzC,MAAMU,EAAe1D,0BAER2D,EAAWA,IAAMxD,qBAAWuD,GAE5BE,EAAgBtD,IAAmB,IAAlB,SAAEC,GAAUD,EACtC,MAAOuD,EAAQC,GAAapD,mBAAS,IAG/BqD,EAAYhD,uBAAYiD,IAAoD,IAAnD,QAAEC,EAAO,QAAEC,EAAU,OAAM,QAAEC,EAAU,KAAMH,EACxE,MAAM3C,EAAK+C,KAAKC,MAChBP,GAAWQ,GAAS,IAAIA,EAAM,CAAEjD,KAAI4C,UAASC,cAG7CK,YAAW,KACPT,GAAWQ,GAASA,EAAKE,QAAQC,GAAUA,EAAMpD,KAAOA,KAAI,GAC7D8C,EAAQ,GACZ,IAOH,OACIlC,cAACyB,EAAaxB,SAAQ,CAACC,MAAO,CAAE0B,SAAQE,YAAWW,YALlCrD,IACjByC,GAAWQ,GAASA,EAAKE,QAAQC,GAAUA,EAAMpD,KAAOA,KAAI,GAIKd,SAC5DA,GACmB,EC8GjBoE,MA/HAA,KAEX,MAAMnE,EAAcN,IACdO,EAAiBL,IACjBQ,EAAUC,eACV,UAAEkD,GAAcJ,KAGhB,SAAEb,EAAQ,YAAEC,EAAW,IAAEC,GAAQH,IAWjC+B,EACFnC,eAACoC,IAAO,CACJnC,UAAWC,IAAOkC,QAClBC,gBAAiBnC,IAAOoC,OACxBC,GAAG,gBAAezE,SAAA,CAElB0B,cAAA,KAAGS,UAAU,4BAA8B,eAK7CuC,EACFxC,eAAAyC,WAAA,CAAA3E,SAAA,CACIkC,eAACoC,IAAO,CACJnC,UAAWC,IAAOkC,QAClBC,gBAAiBnC,IAAOoC,OACxBC,GAAG,QAAOzE,SAAA,CAEV0B,cAAA,KAAGS,UAAU,8BAAgC,WAEjDD,eAACoC,IAAO,CACJnC,UAAWC,IAAOkC,QAClBC,gBAAiBnC,IAAOoC,OACxBC,GAAG,SAAQzE,SAAA,CAEX0B,cAAA,KAAGS,UAAU,sBAAwB,YAEzCD,eAACoC,IAAO,CACJnC,UAAWC,IAAOkC,QAClBG,GAAG,IACHG,QAtCUC,KAClB1F,aAAaoC,WAAW,gBACxBpC,aAAaoC,WAAW,iBACxBrB,EAAe,MACfsD,EAAU,CAAEE,QAAS,2BAA4BC,QAAS,SAC1DtD,EAAQmB,KAAK,UAAU,EAiCQxB,SAAA,CAEvB0B,cAAA,KAAGS,UAAU,0BAA4B,eAE7CT,cAAC4C,IAAO,CACJnC,UAAWC,IAAOkC,QAClBG,GAAI,UAAqB,OAAXxE,QAAW,IAAXA,OAAW,EAAXA,EAAaa,KAAKd,SAEhC0B,cAACG,EAAM,CACHC,KAAgB,OAAX7B,QAAW,IAAXA,OAAW,EAAXA,EAAa6E,kBAAmB,2FACrC/C,OAAO,KACPE,IAAI,iBAOd8C,EACF7C,eAAAyC,WAAA,CAAA3E,SAAA,CACIkC,eAACoC,IAAO,CACJnC,UAAWC,IAAOkC,QAClBC,gBAAiBnC,IAAOoC,OACxBC,GAAG,UAASzE,SAAA,CAEZ0B,cAAA,KAAGS,UAAU,uBAAyB,cAE1CD,eAACoC,IAAO,CACJnC,UAAWC,IAAOkC,QAClBC,gBAAiBnC,IAAOoC,OACxBC,GAAG,UAASzE,SAAA,CAEZ0B,cAAA,KAAGS,UAAU,qBAAuB,iBAMhD,OACIT,cAACsD,IAAM,CACHzC,SAAUA,EACVJ,UAAWC,IAAOgC,OAClBa,OAAO,KACPC,MAAM,MAAKlF,SAEXkC,eAACiD,IAAS,CAAChD,UAAU,oDAAmDnC,SAAA,CACpE0B,cAAC4C,IAAO,CAACG,GAAG,IAAIW,OAAK,EAAApF,SACjB0B,cAACsD,IAAOK,MAAK,CAAClD,UAAU,UAASnC,SAC7B0B,cAAA,OAAKI,IAAKwD,EAAMrD,IAAI,gBAAgBF,OAAO,WAIlD9B,GAAeoE,EAEhB3C,cAACsD,IAAOO,OAAM,CACV9C,IAAKA,EACLmC,QAASA,IAAMpC,GAAaD,GAC5B,gBAAc,qBAElBb,cAACsD,IAAOQ,SAAQ,CAAC1E,GAAG,mBAAkBd,SAClCkC,eAACuD,IAAG,CAACtD,UAAU,oBAAmBnC,SAAA,CAC9BkC,eAACoC,IAAO,CACJc,OAAK,EACLjD,UAAWC,IAAOkC,QAClBC,gBAAiBnC,IAAOoC,OACxBC,GAAG,IAAGzE,SAAA,CAEN0B,cAAA,KAAGS,UAAU,2BAA6B,WAG5ClC,EAA+ByE,EAAjBK,WAIvB,E,gFCtIF,MAA0B,mCCgL1BW,MAhKIA,KAAO,IAADC,EAAAC,EAAAC,EAAAC,EAAAC,EAErB,MAAOC,EAAYC,GAAiB9F,mBAAS,CACzC+F,SAAU,GACVC,MAAO,GACPC,UAAW,GACXC,UAAW,MAET,SAAEH,EAAQ,MAAEC,EAAK,UAAEC,EAAS,UAAEC,GAAcL,GAG3CM,EAAQC,GAAapG,mBAAS,CAAC,IAE/BqG,EAAcC,GAAmBtG,oBAAS,GAE3CE,EAAUC,eAGV,UAAEkD,GAAcJ,IAGhBsD,EAAgB9D,IAClBqD,EAAc,IACPD,EACH,CAACpD,EAAMG,OAAO4D,MAAO/D,EAAMG,OAAOnB,QAGtC2E,GAAWK,IAAU,IACdA,EACH,CAAChE,EAAMG,OAAO4D,MAAO,KACrBE,iBAAkB,QACnB,EAqBP,OAEI3E,cAFE,CAED4E,IAAG,CAAC3E,UAAWC,IAAO0E,IAAI9G,SAAA,CACvBkC,eAAC6E,IAAG,CAAC5E,UAAU,sBAAsB6E,GAAI,EAAEhH,SAAA,CACvCkC,eAACiD,IAAS,CAAChD,UAAW,GAAG8E,IAAUC,eAAelH,SAAA,CAC9C0B,cAAA,MAAIS,UAAWC,IAAO+E,OAAOnH,SAAC,YAE9BkC,eAACkF,IAAI,CAACC,SAxBD5G,UACjBmC,EAAM0E,iBACNb,GAAgB,GAChB,UACUjI,EAAMI,KAAK,kBAAmBoH,GAEpCxC,EAAU,CAAEE,QAAS,qCAAsCC,QAAS,YAEpEtD,EAAQmB,KAAK,UACjB,CAAE,MAAOT,GAAM,IAADC,EAEVuF,GAAsB,QAAZvF,EAAAD,EAAIE,gBAAQ,IAAAD,OAAA,EAAZA,EAAcN,OAAQ,CAAC,EACrC,CAAC,QACG+F,GAAgB,EACpB,GAUyCzG,SAAA,CAEzBkC,eAACkF,IAAKG,MAAK,CAACC,UAAU,WAAUxH,SAAA,CAC5B0B,cAAC0F,IAAKK,MAAK,CAACtF,UAAU,SAAQnC,SAAC,aAC/B0B,cAAC0F,IAAKM,QAAO,CACTvF,UAAWC,IAAOuF,MAClBC,KAAK,OACLC,YAAY,WACZlB,KAAK,WACL/E,MAAOsE,EACP4B,SAAUpB,OAGF,QADHf,EACZW,EAAOJ,gBAAQ,IAAAP,OAAA,EAAfA,EAAiBoC,KAAI,CAACrE,EAASsE,IAC5BtG,cAACuG,IAAK,CAACtE,QAAQ,UAAS3D,SAAY0D,GAANsE,KAIlC9F,eAACkF,IAAKG,MAAK,CAACC,UAAU,QAAOxH,SAAA,CACzB0B,cAAC0F,IAAKK,MAAK,CAACtF,UAAU,SAAQnC,SAAC,UAC/B0B,cAAC0F,IAAKM,QAAO,CACTvF,UAAWC,IAAOuF,MAClBC,KAAK,QACLC,YAAY,QACZlB,KAAK,QACL/E,MAAOuE,EACP2B,SAAUpB,OAGL,QADAd,EACZU,EAAOH,aAAK,IAAAP,OAAA,EAAZA,EAAcmC,KAAI,CAACrE,EAASsE,IACzBtG,cAACuG,IAAK,CAACtE,QAAQ,UAAS3D,SAAY0D,GAANsE,KAIlC9F,eAACkF,IAAKG,MAAK,CAACC,UAAU,YAAWxH,SAAA,CAC7B0B,cAAC0F,IAAKK,MAAK,CAACtF,UAAU,SAAQnC,SAAC,aAC/B0B,cAAC0F,IAAKM,QAAO,CACTvF,UAAWC,IAAOuF,MAClBC,KAAK,WACLC,YAAY,WACZlB,KAAK,YACL/E,MAAOwE,EACP0B,SAAUpB,OAGD,QADJb,EACZS,EAAOF,iBAAS,IAAAP,OAAA,EAAhBA,EAAkBkC,KAAI,CAACrE,EAASsE,IAC7BtG,cAACuG,IAAK,CAACtE,QAAQ,UAAS3D,SAAY0D,GAANsE,KAIlC9F,eAACkF,IAAKG,MAAK,CAACC,UAAU,YAAWxH,SAAA,CAC7B0B,cAAC0F,IAAKK,MAAK,CAACtF,UAAU,SAAQnC,SAAC,qBAC/B0B,cAAC0F,IAAKM,QAAO,CACTvF,UAAWC,IAAOuF,MAClBC,KAAK,WACLC,YAAY,mBACZlB,KAAK,YACL/E,MAAOyE,EACPyB,SAAUpB,OAGD,QADJZ,EACZQ,EAAOD,iBAAS,IAAAP,OAAA,EAAhBA,EAAkBiC,KAAI,CAACrE,EAASsE,IAC7BtG,cAACuG,IAAK,CAACtE,QAAQ,UAAS3D,SAAY0D,GAANsE,KAIlCtG,cAACwG,IAAM,CACH/F,UAAW,GAAGgG,IAAUD,UAAUC,IAAUC,QAAQD,IAAUE,SAC9DT,KAAK,SACLU,SAAU9B,EAAaxG,SAEtBwG,EAAe,gBAAkB,YAGd,QAFfT,EAERO,EAAOO,wBAAgB,IAAAd,OAAA,EAAvBA,EAAyBgC,KAAI,CAACrE,EAASsE,IACpCtG,cAACuG,IAAK,CAAWtE,QAAQ,UAAUxB,UAAU,OAAMnC,SAC9C0D,GADOsE,WAMxBtG,cAACyD,IAAS,CAAChD,UAAW,QAAQ8E,IAAUC,UAAUlH,SAC9CkC,eAACqG,IAAI,CAACpG,UAAWC,IAAOmG,KAAM9D,GAAG,UAASzE,SAAA,CAAC,4BACd0B,cAAA,QAAA1B,SAAM,oBAI3C0B,cAACqF,IAAG,CACAC,GAAI,EACJ7E,UAAW,iCAAiCC,IAAOoG,YAAYxI,SAE/D0B,cAAC+G,IAAK,CACFtG,UAAW,GAAG8E,IAAUyB,cACxB5G,IAAK6G,EACL1G,IAAI,6BAGV,EC5KC,MAA0B,mCC8J1B2G,MA5If,WAAuB,IAADjD,EAAAE,EAAAE,EAClB,MAAM7F,EAAiBL,KAChBgJ,EAAYC,GAAiB3I,mBAAS,CACzC+F,SAAU,GACV6C,SAAU,MAER,SAAE7C,EAAQ,SAAE6C,GAAaF,GACxBvC,EAAQC,GAAapG,mBAAS,CAAC,IAC/BqG,EAAcC,GAAmBtG,oBAAS,GAC3CE,EAAUC,cACV0I,EAAWC,eAEX,UAAEzF,GAAcJ,IAGtB3B,qBAAU,KAAO,IAADyH,EACM,QAAlBA,EAAIF,EAASG,aAAK,IAAAD,GAAdA,EAAgBhF,QAChBV,EAAUwF,EAASG,MAAMjF,OAEzB7D,EAAQ+I,QAAQ,IAAKJ,EAAUG,MAAO,CAAC,IAC3C,GACD,CAACH,EAAUxF,EAAWnD,IAEzB,MA+BMqG,EAAgB9D,IAClBkG,EAAc,IACPD,EACH,CAACjG,EAAMG,OAAO4D,MAAO/D,EAAMG,OAAOnB,QAGtC2E,GAAWK,IAAU,IACdA,EACH,CAAChE,EAAMG,OAAO4D,MAAO,KACrBE,iBAAkB,QACnB,EAGP,OACI3E,eAAC4E,IAAG,CAAC3E,UAAWC,IAAO0E,IAAI9G,SAAA,CACvBkC,eAAC6E,IAAG,CAAC5E,UAAU,qBAAqB6E,GAAI,EAAEhH,SAAA,CACtCkC,eAACiD,IAAS,CAAChD,UAAW,GAAG8E,IAAUC,cAAclH,SAAA,CAC7C0B,cAAA,MAAIS,UAAWC,IAAO+E,OAAOnH,SAAC,YAC9BkC,eAACkF,IAAI,CAACC,SAjDD5G,UACjBmC,EAAM0E,iBACNb,GAAgB,GAChB,IAEI,MAAM4C,QAAY7K,EAAMI,KAAK,SAAUiK,IACjC,KAAEnI,GAAS2I,EAGjBlK,aAAa0B,QAAQ,eAAgBH,EAAKY,QAC1CnC,aAAa0B,QAAQ,gBAAiBH,EAAKW,SAG3C,MAAQX,KAAM4I,SAAmB9K,EAAMmC,IAAI,iBAAkB,CACzDhC,QAAS,CACLiC,cAAe,UAAUF,EAAKY,YAGtCpB,EAAeoJ,GAEf9F,EAAU,CAAEE,QAAS,0BAA2BC,QAAS,YAEzDtD,EAAQmB,KAAK,IACjB,CAAE,MAAOT,GAAM,IAADC,EAEVuF,GAAsB,QAAZvF,EAAAD,EAAIE,gBAAQ,IAAAD,OAAA,EAAZA,EAAcN,OAAQ,CAAC,EACrC,CAAC,QACG+F,GAAgB,EACpB,GAqByCzG,SAAA,CACzBkC,eAACkF,IAAKG,MAAK,CAACC,UAAU,WAAUxH,SAAA,CAC5B0B,cAAC0F,IAAKK,MAAK,CAACtF,UAAU,SAAQnC,SAAC,aAC/B0B,cAAC0F,IAAKM,QAAO,CACTE,KAAK,OACLC,YAAY,WACZlB,KAAK,WACLxE,UAAWC,IAAOuF,MAClB/F,MAAOsE,EACP4B,SAAUpB,OAGF,QADHf,EACZW,EAAOJ,gBAAQ,IAAAP,OAAA,EAAfA,EAAiBoC,KAAI,CAACrE,EAASsE,IAC5BtG,cAACuG,IAAK,CAAWtE,QAAQ,UAAS3D,SAC7B0D,GADOsE,KAKhB9F,eAACkF,IAAKG,MAAK,CAACC,UAAU,WAAUxH,SAAA,CAC5B0B,cAAC0F,IAAKK,MAAK,CAACtF,UAAU,SAAQnC,SAAC,aAC/B0B,cAAC0F,IAAKM,QAAO,CACTE,KAAK,WACLC,YAAY,WACZlB,KAAK,WACLxE,UAAWC,IAAOuF,MAClB/F,MAAOmH,EACPjB,SAAUpB,OAGF,QADHb,EACZS,EAAOyC,gBAAQ,IAAAlD,OAAA,EAAfA,EAAiBkC,KAAI,CAACrE,EAASsE,IAC5BtG,cAACuG,IAAK,CAAWtE,QAAQ,UAAS3D,SAC7B0D,GADOsE,KAIhBtG,cAACwG,IAAM,CACH/F,UAAW,GAAGgG,IAAUD,UAAUC,IAAUC,QAAQD,IAAUE,SAC9DT,KAAK,SACLU,SAAU9B,EAAcxG,SAEvBwG,EAAe,gBAAkB,YAEd,QADfT,EACRO,EAAOO,wBAAgB,IAAAd,OAAA,EAAvBA,EAAyBgC,KAAI,CAACrE,EAASsE,IACpCtG,cAACuG,IAAK,CAAWtE,QAAQ,UAAUxB,UAAU,OAAMnC,SAC9C0D,GADOsE,WAMxBtG,cAACyD,IAAS,CAAChD,UAAW,QAAQ8E,IAAUC,UAAUlH,SAC9CkC,eAACqG,IAAI,CAACpG,UAAWC,IAAOmG,KAAM9D,GAAG,UAASzE,SAAA,CAAC,0BAChB0B,cAAA,QAAA1B,SAAM,yBAIzC0B,cAACqF,IAAG,CACAC,GAAI,EACJ7E,UAAW,iCAAiCC,IAAOmH,YAAYvJ,SAE/D0B,cAAC+G,IAAK,CACFtG,UAAW,GAAG8E,IAAUyB,cACxB5G,IAAK0H,EACLvH,IAAI,6BAKxB,E,0BCpIewH,MAbD1J,IAAgC,IAA/B,QAAE2J,EAAO,IAAE5H,EAAG,QAAE4B,GAAS3D,EACpC,OACImC,eAAA,OAAKC,UAAW,GAAGC,IAAOqH,YAAYzJ,SAAA,CAEjC0J,GAAWhI,cAACiI,IAAO,CAACC,UAAU,WAE9B9H,GAAOJ,cAAA,OAAKI,IAAKA,EAAKG,IAAKyB,IAE3BA,GAAWhC,cAAA,KAAGS,UAAU,OAAMnC,SAAE0D,MAC/B,E,iBCwNCmG,OA3Nf,WAA2B,IAADC,EAAAC,EAAAC,EAAAC,EACtB,MAAO3D,EAAQC,GAAapG,mBAAS,CAAC,IAE/B+J,EAAUC,GAAehK,mBAAS,CACrCiK,MAAO,GACPC,KAAM,GACNC,QAAS,GACTC,MAAO,MAEL,MAAEH,EAAK,KAAEC,EAAI,QAAEC,EAAO,MAAEC,GAAUL,EAGlCM,EAAa9H,iBAAO,MACpBrC,EAAUC,cAGVoG,EAAgB9D,IAClBuH,EAAY,IACLD,EACH,CAACtH,EAAMG,OAAO4D,MAAO/D,EAAMG,OAAOnB,OACpC,GAGC6I,EAAcC,GAAmBvK,mBAAS,MAqE3CwK,EACFzI,eAAA,OAAKC,UAAU,cAAanC,SAAA,CACxBkC,eAACkF,IAAKG,MAAK,CAAAvH,SAAA,CACP0B,cAAC0F,IAAKK,MAAK,CAAAzH,SAAC,UACZ0B,cAAC0F,IAAKM,QAAO,CACTE,KAAK,OACLjB,KAAK,QACLkB,YAAY,iCACZjG,MAAOwI,EACPtC,SAAUpB,OAGX,OAANJ,QAAM,IAANA,GAAa,QAAPwD,EAANxD,EAAQ8D,aAAK,IAAAN,OAAP,EAANA,EAAe/B,KAAI,CAACrE,EAASsE,IAC1BtG,cAACuG,IAAK,CAACtE,QAAQ,UAAS3D,SACnB0D,GADyBsE,KAKlC9F,eAACkF,IAAKG,MAAK,CAAAvH,SAAA,CACP0B,cAAC0F,IAAKK,MAAK,CAAAzH,SAAC,SACZ0B,cAAC0F,IAAKM,QAAO,CACTE,KAAK,OACLjB,KAAK,OACLkB,YAAY,+BACZjG,MAAOyI,EACPvC,SAAUpB,OAGX,OAANJ,QAAM,IAANA,GAAY,QAANyD,EAANzD,EAAQ+D,YAAI,IAAAN,OAAN,EAANA,EAAchC,KAAI,CAACrE,EAASsE,IACzBtG,cAACuG,IAAK,CAACtE,QAAQ,UAAS3D,SACnB0D,GADyBsE,KAIlC9F,eAACkF,IAAKG,MAAK,CAAAvH,SAAA,CACP0B,cAAC0F,IAAKK,MAAK,CAAAzH,SAAC,YACZ0B,cAAC0F,IAAKM,QAAO,CACTkD,GAAG,WACHC,KAAM,EACNlE,KAAK,UACLkB,YAAY,sCACZjG,MAAO0I,EACPxC,SAAUpB,OAGX,OAANJ,QAAM,IAANA,GAAe,QAAT0D,EAAN1D,EAAQgE,eAAO,IAAAN,OAAT,EAANA,EAAiBjC,KAAI,CAACrE,EAASsE,IAC5BtG,cAACuG,IAAK,CAACtE,QAAQ,UAAS3D,SACnB0D,GADyBsE,KAKlCtG,cAACwG,IAAM,CACH/F,UAAW,GAAGgG,IAAUD,UAAUC,IAAU2C,OAC5ClG,QAASA,IAAMvE,EAAQ0K,SAAS/K,SACnC,WAGD0B,cAACwG,IAAM,CACH/F,UAAW,GAAGgG,IAAUD,UAAUC,IAAU2C,OAAQlD,KAAK,SAAQ5H,SAAC,cAM9E,OACI0B,cAAC0F,IAAI,CAACC,SAjGW5G,UAGjB,GAFAmC,EAAM0E,iBAEFhB,EAAOiE,MACP,OAEJ,MAAMS,EAAW,IAAIC,SAErBD,EAASE,OAAO,QAASd,GACzBY,EAASE,OAAO,OAAQb,GACxBW,EAASE,OAAO,UAAWZ,GAC3BU,EAASE,OAAO,QAASV,EAAW3H,QAAQsI,MAAM,IAElD,IACI,MAAM,KAAEzK,SAAelC,EAAMI,KAAK,UAAWoM,EAAU,CACnDrM,QAAS,CACLiC,cAAe,UAAUzB,aAAaC,QAAQ,kBAC9C,eAAgB,yBAIxBiB,EAAQmB,KAAK,CACT4J,SAAU,UAAU1K,EAAKI,KACzBqI,MAAO,CAAEkC,aAAc,+BAE/B,CAAE,MAAOtK,GAAM,IAADC,EACwBsK,EAAlC,GAA6B,OAAb,QAAZtK,EAAAD,EAAIE,gBAAQ,IAAAD,OAAA,EAAZA,EAAcE,QACdqF,EAAsB,QAAb+E,EAACvK,EAAIE,gBAAQ,IAAAqK,OAAA,EAAZA,EAAc5K,KAEhC,GAoE6BV,SACzBkC,eAAC4E,IAAG,CAAA9G,SAAA,CACA0B,cAACqF,IAAG,CAAC5E,UAAU,kBAAkB6E,GAAI,EAAGuE,GAAI,EAAEvL,SAC1CkC,eAACiD,IAAS,CACNhD,UAAW,GAAG8E,IAAUC,WAAW9E,IAAO+C,sDAAsDnF,SAAA,CAEhGkC,eAACkF,IAAKG,MAAK,CAACpF,UAAU,cAAanC,SAAA,CAC9ByK,EAEG/I,cAAA,OACII,IAAK2I,EACLxI,IAAI,GACJE,UAAU,iBACVqJ,MAAO,CAAEC,UAAW,QAASC,UAAW,WAI5ChK,cAAC+H,EAAK,CACF/F,QAAQ,kCACRgG,SAAS,EACT5H,IAAK,OAKbJ,cAAC0F,IAAKK,MAAK,CACPtF,UAAW,GAAGgG,IAAUwD,gBAAgBxD,IAAU2C,gBAClDc,QAAQ,eAAc5L,SAErBuK,EAAQ,mBACLrI,eAAA,OAAKC,UAAU,wCAAuCnC,SAAA,CAClD0B,cAAA,KAAGS,UAAU,kCAAoC,uBAO7DT,cAAC0F,IAAKM,QAAO,CACT5G,GAAG,eACH8G,KAAK,OACLiE,OAAO,UACP/D,SA5KDlF,IACvB,GAAIA,EAAMG,OAAOoI,MAAMW,OAAQ,CAC3B,MAAMC,EAAOnJ,EAAMG,OAAOoI,MAAM,GAEhC,IAAKY,EAAKnE,KAAKoE,WAAW,UAKtB,OAJAzF,EAAU,CAAEgE,MAAO,CAAC,mCACpBJ,EAAY,IAAKD,EAAUK,MAAO,OAClCG,EAAgB,WAChBF,EAAW3H,QAAQjB,MAAQ,MAI/B,GAAImK,EAAKE,KA5BK,QAiCV,OAJA1F,EAAU,CAAEgE,MAAO,CAAC,0CACpBJ,EAAY,IAAKD,EAAUK,MAAO,OAClCG,EAAgB,WAChBF,EAAW3H,QAAQjB,MAAQ,MAK/B2E,GAAWxC,IAAI,IAAWA,EAAMwG,MAAO,SAEnCE,GACAyB,IAAIC,gBAAgB1B,GAGxB,MAAM2B,EAAgBF,IAAIG,gBAAgBN,GAC1CrB,EAAgB0B,GAChBjC,EAAY,IAAKD,EAAUK,MAAOwB,GACtC,GA+IwBtJ,IAAK+H,EACLrI,UAAU,cAGX,OAANmE,QAAM,IAANA,GAAa,QAAP2D,EAAN3D,EAAQiE,aAAK,IAAAN,OAAP,EAANA,EAAelC,KAAI,CAACrE,EAASsE,IAC1BtG,cAACuG,IAAK,CAACtE,QAAQ,UAAS3D,SACnB0D,GADyBsE,KAIlCtG,cAAA,OAAKS,UAAU,YAAWnC,SAAE2K,SAGpCjJ,cAACqF,IAAG,CAACC,GAAI,EAAGuE,GAAI,EAAGpJ,UAAU,+BAA8BnC,SACvD0B,cAACyD,IAAS,CAAChD,UAAW8E,IAAUC,QAAQlH,SAAE2K,UAK9D,E,yFClOA,MAAM2B,GAAYC,IAAMC,YAAW,CAAAzM,EAAyB0C,KAAG,IAA3B,QAAEmC,EAAO,UAAEzC,GAAWpC,EAAA,OACtD2B,cAAA,KACIS,UAAW,qBAAqBA,IAChCM,IAAKA,EACLmC,QAAU6H,IACNA,EAAEnF,iBACF1C,EAAQ6H,EAAE,GAEhB,IAGOC,GAAejJ,IAAmC,IAAlC,WAAEkJ,EAAU,aAAEC,GAAcnJ,EACrD,OACIvB,eAAC2K,KAAQ,CAAC1K,UAAU,UAAU2K,KAAK,OAAM9M,SAAA,CACrC0B,cAACmL,KAAStH,OAAM,CAACpD,UAAWC,KAAO2K,iBAEnC7K,eAAC2K,KAASG,KAAI,CACV7K,UAAW,GAAGC,KAAO6K,2BACrBC,aAAc,CAAEC,SAAU,SAAUnN,SAAA,CAEpCkC,eAAC2K,KAASO,KAAI,CACVjL,UAAWC,KAAOiL,aAClBzI,QAAS+H,EACT,aAAW,OAAM3M,SAAA,CAEjB0B,cAAA,KAAGS,UAAU,gBAAgB,WAEjCD,eAAC2K,KAASO,KAAI,CACVjL,UAAWC,KAAOiL,aAClBzI,QAASgI,EACT,aAAW,SAAQ5M,SAAA,CAEnB0B,cAAA,KAAGS,UAAU,qBAAqB,kBAGnC,EAINmL,GAAmBC,IAAa,IAAZ,GAAEzM,GAAIyM,EACnC,MAAMlN,EAAUC,cAChB,OACI4B,eAAC2K,KAAQ,CAAC1K,UAAW,gBAAgBC,KAAOoL,WAAYV,KAAK,OAAM9M,SAAA,CAC/D0B,cAACmL,KAAStH,OAAM,CAACpD,UAAWC,KAAO2K,eAAgBnC,GAAI0B,KACvDpK,eAAC2K,KAASG,KAAI,CAAC7K,UAAWC,KAAO6K,aAAajN,SAAA,CAC1CkC,eAAC2K,KAASO,KAAI,CACVxC,GAAG,SACHhG,QAAU6H,IACNA,EAAEnF,iBACFjH,EAAQmB,KAAK,UAAUV,SAAU,EAErC,aAAW,eACXqB,UAAWC,KAAOiL,aAAarN,SAAA,CAE/B0B,cAAA,KAAGS,UAAU,gBAAgB,gBAEjCD,eAAC2K,KAASO,KAAI,CACVxC,GAAG,SACHhG,QAAU6H,IACNA,EAAEnF,iBACFjH,EAAQmB,KAAK,UAAUV,kBAAmB,EAE9C,aAAW,gBACXqB,UAAWC,KAAOiL,aAAarN,SAAA,CAE/B0B,cAAA,KAAGS,UAAU,mBAAmB,qBAGpCD,eAAC2K,KAASO,KAAI,CACVxC,GAAG,SACHhG,QAAU6H,IACNA,EAAEnF,iBACFjH,EAAQmB,KAAK,UAAUV,kBAAmB,EAE9C,aAAW,gBACXqB,UAAWC,KAAOiL,aAAarN,SAAA,CAE/B0B,cAAA,KAAGS,UAAU,eAAe,0BAI7B,EC+DJsL,OA9IDC,IAEV,MAAM,GACF5M,EAAE,OAAE6M,EAAM,UAAEC,EAAS,gBAAE9I,EAAe,MAAEsF,EAAK,KAAEC,EAAI,QACnDC,EAAO,MAAEC,EAAK,WAAEsD,EAAU,YAAEC,EAAW,UAAEC,EAAS,eAClDC,EAAc,SAAEC,EAAQ,QAAEC,GAC1BR,EAEEzN,EAAcN,IACdwO,GAAuB,OAAXlO,QAAW,IAAXA,OAAW,EAAXA,EAAaiG,YAAayH,GACtC,UAAEnK,GAAcJ,IAChB/C,EAAUC,eAGT8N,EAAiBC,GAAsBlO,mBAAS2N,IAChDQ,EAAeC,GAAoBpO,mBAAS4N,IAC5CS,EAASC,GAActO,oBAAS,GAoDvC,OACI+B,eAACwM,KAAI,CAACvM,UAAWC,KAAOqL,KAAKzN,SAAA,CACzB0B,cAACgN,KAAKC,KAAI,CAAA3O,SACNkC,eAAC0M,KAAK,CAACzM,UAAU,6CAA4CnC,SAAA,CACzDkC,eAACqG,IAAI,CAAC9D,GAAI,UAAUmJ,IAAY5N,SAAA,CAC5B0B,cAACG,EAAM,CACHC,IAAKgD,GAAmB,2FACxB/C,OAAO,KACPE,IAAI,YAEP0L,KAGLzL,eAAA,OAAKC,UAAU,4BAA2BnC,SAAA,CACtC0B,cAAA,QAAA1B,SACK,IAAI6D,KAAKgK,GAAYgB,oBAAezO,EAAW,CAC5C0O,KAAM,UACNC,MAAO,QACPC,IAAK,UACLC,KAAM,UACNC,OAAQ,cAGff,GAAaF,GACVvM,cAACgL,GAAY,CAACC,WA1EnBA,KACftM,EAAQmB,KAAK,UAAUV,SAAU,EAyEyB8L,aAtEzCnM,UACjB,UACUjC,EAAM2Q,OAAO,UAAUrO,MAC7B0C,EAAU,CAAEE,QAAS,4BAA6BC,QAAS,YAC3DtD,EAAQmB,KAAK,IACjB,CAAE,MAAOT,GACLqO,QAAQ/P,MAAM,uBAAwB0B,EAC1C,aAqEIW,cAAC6G,IAAI,CAAC9D,GAAI,UAAU3D,IAAKd,SACrB0B,cAACgN,KAAKW,IAAG,CAACvN,IAAKyI,EAAOtI,IAAKmI,MAG/BlI,eAACwM,KAAKC,KAAI,CAAA3O,SAAA,CACLoK,GAAS1I,cAACgN,KAAKY,MAAK,CAACnN,UAAU,cAAanC,SAAEoK,IAC9CC,GAAQ3I,cAACgN,KAAKa,KAAI,CAAAvP,SAAEqK,IACpBC,GAAW5I,cAACgN,KAAKa,KAAI,CAAAvP,SAAEsK,IAExBpI,eAAA,OAAKC,UAAWC,KAAOoN,QAAQxP,SAAA,CAE1BmO,EACGzM,cAAC+N,KAAc,CAACC,UAAU,MAAMC,QAASjO,cAACkO,KAAO,CAAA5P,SAAC,kCAAwCA,SACtF0B,cAAA,KAAGS,UAAU,mBAEjBlC,EACAiC,eAAAyC,WAAA,CAAA3E,SAAA,CACI0B,cAAA,QAAMkD,QAnFXnE,UACf,IAAI+N,EAAJ,CACAC,GAAW,GACX,IACI,MAAM,KAAE/N,SAAelC,EAAMI,KAAK,gBAAgBkC,WAG9CoN,GAEIA,EADAD,EACS4B,IAAQ,IACVA,EACH/B,YAAapN,EAAKoN,YAClBC,UAAWrN,EAAKqN,YAGX+B,IAAS,IACXA,EACHC,QAASD,EAAUC,QAAQhI,KAAKnJ,GAC5BA,EAAKkC,KAAOA,EACN,IAAKlC,EAAMkP,YAAapN,EAAKoN,YAAaC,UAAWrN,EAAKqN,WAC1DnP,OAOtByP,EAAmB3N,EAAKoN,aACxBS,EAAiB7N,EAAKqN,UAC1B,CAAE,MAAOhN,GACLqO,QAAQ/P,MAAM,qBAAsB0B,EACxC,CAAC,QACG0N,GAAW,EACf,CAhCmB,CAgCnB,EAkD+CjD,MAAO,CAAEwE,cAAexB,EAAU,OAAS,QAASxO,SAC3E0B,cAAA,KACIS,UACImM,EACM,gBAAgBlM,KAAO6N,QACvB,gBAAgB7N,KAAO8N,mBAIzCxO,cAAA,QAAA1B,SAAOoO,OAGX1M,cAAC+N,KAAc,CAACC,UAAU,MAAMC,QAASjO,cAACkO,KAAO,CAAA5P,SAAC,0BAAgCA,SAC9E0B,cAAA,KAAGS,UAAU,mBAIrBT,cAAC6G,IAAI,CAAC9D,GAAI,UAAU3D,IAAKd,SACrB0B,cAAA,KAAGS,UAAU,sBAEhB6L,UAGN,E,6BC9CAmC,OA3Ff,SAA2BzC,GAEvB,MAAOpD,EAAS8F,GAAcjQ,mBAAS,KACjC,KAAEvB,EAAI,QAAEsP,EAAO,YAAEmC,EAAW,eAAEC,GAAmB5C,GAAS,CAAC,GAE1DlH,EAAcC,GAAmBtG,oBAAS,IAE1Cd,EAAOkR,GAAYpQ,mBAAS,MAC7BF,EAAcN,IA8CpB,OACIuC,eAACkF,IAAI,CAACjF,UAAU,OAAOkF,SAtCN5G,UAGjB,GAFAmC,EAAM0E,iBAEDgD,EAAQkG,OAAb,CAEA/J,GAAgB,GAChB8J,EAAS,MAET,IAEI,MAAM,KAAE7P,SAAelC,EAAMI,KAAK,aAAc,CAC5C0L,UACA1L,SAIJyR,GAAaI,IAAY,IAClBA,EACHV,QAAS,CAACrP,KAAS+P,EAAaV,aAIpC7B,GAAS2B,IAAQ,IACVA,EACH7B,eAAgB6B,EAAS7B,eAAiB,MAI9CoC,EAAW,GACf,CAAE,MAAOrP,GACLqO,QAAQ/P,MAAM0B,GACdwP,EAAS,4CACb,CAAC,QACG9J,GAAgB,EACpB,CA/B2B,CA+B3B,EAI8CzG,SAAA,CAC1C0B,cAAC0F,IAAKG,MAAK,CAAAvH,SACPkC,eAACwO,KAAU,CAAA1Q,SAAA,CAEP0B,cAAC6G,IAAI,CAAC9D,GAAI,UAAqB,OAAXxE,QAAW,IAAXA,OAAW,EAAXA,EAAaa,KAAKd,SAClC0B,cAACG,EAAM,CAACC,IAAKwO,MAGjB5O,cAAC0F,IAAKM,QAAO,CACTvF,UAAWC,KAAOgF,KAClBS,YAAY,gBACZ+C,GAAG,WACHhJ,MAAO0I,EACPxC,SAzDElF,IAClBwN,EAAWxN,EAAMG,OAAOnB,OACpBvC,GAAOkR,EAAS,KAAK,EAwDT1F,KAAM,EACN,aAAW,kBACXvC,SAAU9B,SAMrBnH,GAASqC,cAAA,OAAKiP,KAAK,QAAQxO,UAAU,mBAAkBnC,SAAEX,IAG1DqC,cAAA,UACIS,UAAW,GAAGC,KAAO8F,6BACrBI,UAAWgC,EAAQkG,QAAUhK,EAC7BoB,KAAK,SAAQ5H,SAEZwG,EAAe,aAAe,WAI/C,ECVeoK,OApFf,SAAwB7Q,GAA4D,IAA3D,GAAEe,EAAE,QAAEwJ,EAAO,gBAAEuG,EAAe,YAAER,EAAW,UAAElO,GAAWpC,EAE7E,MAAO+Q,EAAaC,GAAkB5Q,mBAASmK,IAExC9D,EAAcC,GAAmBtG,oBAAS,IAE1Cd,EAAOkR,GAAYpQ,mBAAS,MAwCnC,OACI+B,eAACkF,IAAI,CAACC,SAhCW5G,UACjBmC,EAAM0E,iBAEN,MAAM0J,EAAiBF,EAAYN,OACnC,GAAKQ,EAAL,CAEAvK,GAAgB,GAChB8J,EAAS,MAET,UACU/R,EAAMyS,IAAI,aAAanQ,KAAO,CAAEwJ,QAAS0G,IAG/CX,GAAaI,IAAY,IAClBA,EACHV,QAASU,EAAaV,QAAQhI,KAAKmJ,GAC/BA,EAAQpQ,KAAOA,EACT,IAAKoQ,EAAS5G,QAAS0G,EAAgBnD,WAAY,OACnDqD,QAIdL,GAAgB,EACpB,CAAE,MAAO9P,GACLqO,QAAQ/P,MAAM0B,GACdwP,EAAS,8CACb,CAAC,QACG9J,GAAgB,EACpB,CAxB2B,CAwB3B,EAI8BtE,UAAWA,EAAUnC,SAAA,CAC/C0B,cAAC0F,IAAKG,MAAK,CAACpF,UAAU,OAAMnC,SACxB0B,cAAC0F,IAAKM,QAAO,CACTvF,UAAWC,KAAOgF,KAClBwD,GAAG,WACHhJ,MAAOkP,EACPhJ,SA5CMlF,IAClBmO,EAAenO,EAAMG,OAAOnB,OACxBvC,GAAOkR,EAAS,KAAK,EA2Cb1F,KAAM,EACN,aAAW,eACXvC,SAAU9B,MAKjBnH,GAASqC,cAAA,OAAKiP,KAAK,QAAQxO,UAAU,mBAAkBnC,SAAEX,IAE1D6C,eAAA,OAAKC,UAAU,aAAYnC,SAAA,CACvB0B,cAAA,UACIS,UAAWC,KAAO8F,OAClBtD,QAASA,IAAMiM,GAAgB,GAC/BjJ,KAAK,SACLU,SAAU9B,EAAaxG,SAC1B,WAGD0B,cAAA,UACIS,UAAWC,KAAO8F,OAClBI,UAAWwI,EAAYN,QAAUhK,EACjCoB,KAAK,SAAQ5H,SAEZwG,EAAe,YAAc,cAKlD,E,oBC+Ce2K,OAzHEzD,IACb,MAAM,UACFE,EAAS,gBACT9I,EAAe,OACf6I,EAAM,WACNE,EAAU,QACVvD,EAAO,GACPxJ,EAAE,QACFoN,EAAO,YACPmC,EAAW,OACXe,GACA1D,GAGG2D,EAAcR,GAAmB1Q,oBAAS,GAG3CF,EAAcN,IAEdwO,GAAuB,OAAXlO,QAAW,IAAXA,OAAW,EAAXA,EAAaiG,YAAayH,GAMtC,UAAEnK,GAAcJ,IAoDtB,OACIlB,eAAAyC,WAAA,CAAA3E,SAAA,CACI0B,cAAA,SACAQ,eAAC0M,KAAK,CAAA5O,SAAA,CAEF0B,cAAC6G,IAAI,CAAC9D,GAAI,UAAUmJ,IAAY5N,SAC5B0B,cAACG,EAAM,CAACC,IAAKgD,GA7DH,+FAgEd5C,eAAC0M,KAAMD,KAAI,CAACxM,UAAU,yBAAwBnC,SAAA,CAC1C0B,cAAA,QAAMS,UAAWC,KAAOkP,OAAOtR,SAAE2N,IACjCjM,cAAA,QAAMS,UAAWC,KAAOyB,KAAK7D,SAAE6N,IAG9BwD,EACG3P,cAAA,OAAKS,UAAWoP,KAAetE,aAAajN,SACxC0B,cAACkP,GAAe,CACZ9P,GAAIA,EACJ8M,UAAWA,EACXtD,QAASA,EACTxF,gBAAiBA,EACjBuL,YAAaA,EACbQ,gBAAiBA,MAIzBnP,cAAA,KAAA1B,SAAIsK,OAKX6D,IAAckD,GACX3P,cAAA,OAAKS,UAAU,UAASnC,SACpB0B,cAACgL,GAAY,CACTC,WAAYA,IAAMkE,GAAgB,GAClCjE,aApFHnM,UACjB,UACUjC,EAAM2Q,OAAO,aAAarO,KAGhCoN,GAAQ2B,GACCA,EAEDA,EAAS2B,eAAe,WAEjB,IACA3B,EACHE,QAASF,EAASE,QAAQhI,KAAInJ,GAC1BA,EAAKkC,KAAOsQ,EACN,IACKxS,EACHoP,eAAgByD,KAAKC,IAAI,EAAG9S,EAAKoP,eAAiB,IAEpDpP,KAKdiR,EAAS/O,KAAOsQ,EACT,IACAvB,EACH7B,eAAgByD,KAAKC,IAAI,EAAG7B,EAAS7B,eAAiB,IAGvD6B,EAvBeA,IA2B1BQ,GAAaI,IAAY,IAClBA,EACHV,QAASU,EAAaV,QAAQ9L,QAAOiN,GAAWA,EAAQpQ,KAAOA,QAInE0C,EAAU,CAAEE,QAAS,gCAAiCC,QAAS,WAEnE,CAAE,MAAO5C,GACLqO,QAAQ/P,MAAM,0BAA2B0B,GAGzCyC,EAAU,CAAEE,QAAS,8CAA+CC,QAAS,UACjF,YA2CG,EC9HX,MAAMgO,GAAkBlS,0BAClBmS,GAAqBnS,0BAGdoS,GAAcA,IAAMjS,qBAAW+R,IAG/BG,GAAmB/R,IAAmB,IAAlB,SAAEC,GAAUD,EAEzC,MAAOuJ,EAAUyI,GAAe5R,mBAAS,CACrC6R,aAAc,CAAEjC,QAAS,IACzBkC,SAAU,CAAElC,QAAS,MAGnB9P,EAAcN,IACdO,EAAiBL,IAGvB4B,qBAAU,KACoBhB,WACtB,IACI,MAAM,KAAEC,SAAelC,EAAMmC,IAAI,2BACjCoR,GAAaG,IAAS,IACfA,EACHF,aAActR,KAEtB,CAAE,MAAOK,GACLqO,QAAQ/P,MAAM,gCAAiC0B,EACnD,GAGJoR,EAAmB,GACpB,CAAClS,IAyDJ,OACIyB,cAACiQ,GAAgBhQ,SAAQ,CACrBC,MAAO,CACHqQ,SAAU3I,EAAS2I,SACnBD,aAAc1I,EAAS0I,aACvBI,mBA3De3R,UACvB,IAEI,MAAM,KAAEC,SAAelC,EAAMI,KAAK,iBAAiByT,MA6CnD,OA1CAN,GAAahO,IACT,MAAMuO,EAAsBvO,EAAKiO,aAAajC,QAAQhI,KAAKwK,GACvDA,EAAKzR,KAAOuR,EACN,IACKE,EACHC,aAAc9R,EAAK8R,aACnBC,UAAW/R,EAAKgS,iBAElBH,IAGJI,EAAkB5O,EAAKkO,SAASlC,QAAQhI,KAAKwK,GAC/CA,EAAKzR,KAAOuR,EACN,IACKE,EACHC,aAAc9R,EAAK8R,aACnBC,UAAW/R,EAAKgS,iBAElBH,IAGV,MAAO,IACAxO,EACHiO,aAAc,IACPjO,EAAKiO,aACRjC,QAASuC,GAEbL,SAAU,IACHlO,EAAKkO,SACRlC,QAAS4C,GAEhB,IAILzS,GAAe6D,GAAQA,GAAQ,IACxBA,EACH6O,UAAWlS,EAAKmS,aACV9O,EAAK6O,UAAY,EACjB7O,EAAK6O,UAAY,KAGpBlS,EAAKgD,OAChB,CAAE,MAAO3C,GACLqO,QAAQ/P,MAAM,yBAA0B0B,EAC5C,IASMf,SAEF0B,cAACkQ,GAAmBjQ,SAAQ,CAACC,MAAOmQ,EAAY/R,SAC3CA,KAEkB,E,wBC1BpB8S,OAvEDpF,IACV,MAAM,KAAE6E,EAAI,OAAEQ,EAAM,UAAEC,EAAY,GAAE,mBAAEZ,GAAuB1E,GACvD,GAAE5M,EAAE,aAAE0R,EAAY,gBAAE1N,GAAoByN,GAAQ,CAAC,EAEjDtS,EAAcN,KACb6O,EAASC,GAActO,oBAAS,GAYjC8S,EACFhT,GAAesS,EAAKrM,WAAajG,EAAYiG,SAEjD,OACIhE,eAAA,OACIC,UAAW,mCAAkC4Q,EAAS,0BAA4B,IAC3E/S,SAAA,CAGP0B,cAAA,OAAA1B,SACI0B,cAAC6G,IAAI,CAACpG,UAAU,oBAAoBsC,GAAI,UAAU3D,IAAKd,SACnD0B,cAACG,EAAM,CACHC,IACIgD,GACA,2FAEJ/C,OAAQiR,EACR/Q,IAAK,GAAGsQ,EAAKrM,mCAMzBxE,cAAA,OAAKS,UAAW,QAAQC,KAAO8Q,YAAYlT,SACvC0B,cAAA,UAAA1B,SAASuS,EAAKrM,aAIlBxE,cAAA,OACIS,UAAW,IAAG4Q,EAAS,aAAe,sBAC/B/S,SAENiT,GACGvR,cAACwG,IAAM,CACH/F,UAAW,GAAGgG,IAAUD,UAAUsK,EAAerK,IAAUgL,aAAehL,IAAU2C,QAC5EiI,EAAS,QAAU,KAC3BnO,QA7CEnE,UACb2R,IAAsB5D,IAC3BC,GAAW,SACL2D,EAAmBtR,GACzB2N,GAAW,GAAM,EA0CDnG,SAAUkG,EACVvC,KAAM8G,EAAS,KAAO,KAAM/S,SAE3BwO,EACKgE,EACI,iBACA,eACJA,EACI,WACA,eAIpB,ECvBCY,OA7CMrT,IAAiB,IAADsT,EAAA,IAAf,OAAEN,GAAQhT,EAC9B,MAAM,aAAEiS,EAAY,mBAAEI,GAAuBP,KAGvCyB,GAAuB,OAAZtB,QAAY,IAAZA,GAAqB,QAATqB,EAAZrB,EAAcjC,eAAO,IAAAsD,OAAT,EAAZA,EAAuBvH,QAAS,EAEjD,OACEpK,cAACyD,IAAS,CACRhD,UAAW,GAAG8E,IAAUC,WAAW6L,EAAS,6BAA+B,KAAK/S,SAE/EsT,EACCpR,eAAAyC,WAAA,CAAA3E,SAAA,CACE0B,cAAA,KAAA1B,SAAG,kBAEF+S,EAECrR,cAAA,OAAKS,UAAU,gCAA+BnC,SAC3CgS,EAAajC,QAAQwD,MAAM,EAAG,GAAGxL,KAAKwK,GACrC7Q,cAACoR,GAAI,CAEHP,KAAMA,EACNQ,QAAM,EACNX,mBAAoBA,GAHfG,EAAKzR,QAShBkR,EAAajC,QAAQhI,KAAKwK,GACxB7Q,cAACoR,GAAI,CAEHP,KAAMA,EACNH,mBAAoBA,GAFfG,EAAKzR,SASlBY,cAAC+H,EAAK,CAAC/F,QAAQ,wBAAwBgG,UAAsB,OAAZsI,QAAY,IAAZA,KAAcjC,YAEvD,E,SCtCT,MAAMyD,GAAgB/S,MAAOgT,EAAUC,KAE1C,GAAKD,EAASE,KAId,IACI,MAAM,KAAEjT,SAAelC,EAAMmC,IAAI8S,EAASE,MAC1CD,GAAaE,IAAY,IAClBA,EACHD,KAAMjT,EAAKiT,KACX5D,QAASrP,EAAKqP,QAAQ8D,QAAO,CAACC,EAAKC,IAExBD,EAAIE,MAAMC,GAAcA,EAAUnT,KAAOiT,EAAIjT,KAC9CgT,EACA,IAAIA,EAAKC,IAChBH,EAAa7D,YAExB,CAAE,MAAOhP,GAELqO,QAAQ/P,MAAM,4BAA6B0B,EAC/C,GCgHWmT,OA1Hf,WAAqB,IAADhL,EAElB,MAAM,GAAEpI,GAAOqT,eAERvV,EAAMsP,GAAW/N,mBAAS,OAC1BiU,EAAU/D,GAAelQ,mBAAS,CAAE4P,QAAS,GAAI4D,KAAM,QACvDtU,EAAOkR,GAAYpQ,mBAAS,MAG7BkL,EAA6B,QAAjBnC,EADDD,cACaE,aAAK,IAAAD,OAAA,EAAdA,EAAgBmC,cAC/B,UAAE7H,GAAcJ,IAGhBnD,EAAcN,IAEdmF,GAA6B,OAAX7E,QAAW,IAAXA,OAAW,EAAXA,EAAa6E,kBACnC,2FAkCF,OA/BArD,qBAAU,KACJ4J,GACF7H,EAAU,CAAEE,QAAS2H,EAAc1H,QAAS,WAC9C,GACC,CAAC0H,EAAc7H,IAGlB/B,qBAAU,KACR,IAAI4S,GAAY,EAmBhB,MAlBoB5T,WAClB,IAEE,OAASC,KAAMwJ,IAAcxJ,KAAM4T,UAAwBhV,QAAQiV,IAAI,CACrE/V,EAAMmC,IAAI,UAAUG,KACpBtC,EAAMmC,IAAI,mBAAmBG,OAE3BuT,IACFnG,EAAQhE,GACRmG,EAAYiE,GAEhB,CAAE,MAAOvT,GACPqO,QAAQoF,IAAIzT,GACRsT,GAAW9D,EAAS,2CAC1B,GAGFhQ,GACO,KAAQ8T,GAAY,CAAK,CAAG,GAClC,CAACvT,IAGCb,EAIDZ,EAEAqC,cAACyD,IAAS,CAAChD,UAAW8E,IAAUC,QAAQlH,SACtC0B,cAAA,MAAA1B,SAAKX,MAMT6C,eAAC4E,IAAG,CAAC3E,UAAU,QAAOnC,SAAA,CAEpBkC,eAAC6E,IAAG,CAAC5E,UAAU,kBAAkBoJ,GAAI,EAAEvL,SAAA,CAEpCpB,EACC8C,cAAC+L,GAAI,IAAK7O,EAAMsP,QAASA,EAASD,UAAQ,IAE1CvM,cAAC+H,EAAK,CAACC,SAAO,IAIhBxH,eAACiD,IAAS,CAAChD,UAAW8E,IAAUC,QAAQlH,SAAA,CAErCC,EACCyB,cAACyO,GAAiB,CAChBsE,QAASxU,EAAYwU,QACrBnE,eAAgBxL,EAChBlG,KAAMkC,EACNoN,QAASA,EACTmC,YAAaA,IAEb+D,EAASrE,QAAQjE,OACnB,WACE,KAGHsI,EAASrE,QAAQjE,OAChBpK,cAACgT,KAAc,CACbC,WAAYP,EAASrE,QAAQjE,OAC7B6H,KAAMA,IAAMH,GAAcY,EAAU/D,GACpCuE,UAAWR,EAAST,KACpBkB,OAAQnT,cAAC+H,EAAK,CAACC,SAAO,IAAI1J,SAEzBoU,EAASrE,QAAQhI,KAAKmJ,GACrBxP,cAACyP,GAAO,IAEFD,EACJhD,QAASA,EACTmC,YAAaA,EACbe,OAAQxS,EAAKkC,IAJRoQ,EAAQpQ,QAQjBb,EACFyB,cAAA,QAAA1B,SAAM,8CAEN0B,cAAA,QAAA1B,SAAM,6BAMZ0B,cAACqF,IAAG,CAACwE,GAAI,EAAGpJ,UAAU,+BAA8BnC,SAClD0B,cAAC0R,GAAY,SAjEV1R,cAACoT,IAAQ,CAACrQ,GAAG,WAqExB,E,oBCtBesQ,OArGf,SAAkBhV,GAA4B,IAADiV,EAAA,IAA1B,QAAEtR,EAAO,OAAEO,EAAS,IAAIlE,EAEzC,MAAOkV,EAAOC,GAAY/U,mBAAS,CAAE4P,QAAS,MAGvCoF,EAAWC,GAAgBjV,oBAAS,IAGrC,SAAEiL,GAAanC,eAGdoM,EAAOC,GAAYnV,mBAAS,IAmCnC,OAhCAsB,qBAAU,KAoBR2T,GAAa,GAGb,MAAMG,EAAQvR,YAAW,KAtBNvD,WACjB,IACE,MAAMQ,QAAiBzC,EAAMmC,IAAI,UAAW,CAC1C6U,OAAQ,CAAEC,OAAQJ,EAAOpR,OAAQA,KAG/BhD,EAASP,MAAQgV,MAAMC,QAAQ1U,EAASP,KAAKqP,SAC/CmF,EAASjU,EAASP,MAElB0O,QAAQ/P,MAAM,gCAAiC4B,EAASP,MAG1D0U,GAAa,EACf,CAAE,MAAOrU,GACPqO,QAAQ/P,MAAM,wBAAyB0B,GACvCqU,GAAa,EACf,GAOAQ,EAAY,GACX,KAEH,MAAO,KACLC,aAAaN,EAAM,CACpB,GACA,CAACtR,EAAQoR,EAAOjK,IAGjBlJ,eAAC4E,IAAG,CAAC3E,UAAU,QAAOnC,SAAA,CAEpBkC,eAAC6E,IAAG,CAAC5E,UAAU,kBAAkBoJ,GAAI,EAAEvL,SAAA,CACrC0B,cAAC0R,GAAY,CAACL,QAAM,IAEpBrR,cAAA,KAAGS,UAAW,iBAAiBC,KAAO0T,eAEtCpU,cAAC0F,IAAI,CACHjF,UAAWC,KAAO2T,UAClB1O,SAAWzE,GAAUA,EAAM0E,iBAAiBtH,SAE5C0B,cAAC0F,IAAKM,QAAO,CACX9F,MAAOyT,EACPvN,SAAWlF,GAAU0S,EAAS1S,EAAMG,OAAOnB,OAC3CgG,KAAK,OACLzF,UAAU,UACV0F,YAAY,sBAKfsN,EACCzT,cAAAiD,WAAA,CAAA3E,SACQ,OAALiV,QAAK,IAALA,GAAc,QAATD,EAALC,EAAOlF,eAAO,IAAAiF,GAAdA,EAAgBlJ,OACfpK,cAACgT,KAAc,CACb1U,SAAUiV,EAAMlF,QAAQhI,KAAKnJ,GAC3B8C,cAAC+L,GAAI,IAAmB7O,EAAMsW,SAAUA,GAA7BtW,EAAKkC,MAElB6T,WAAYM,EAAMlF,QAAQjE,OAC1B+I,OAAQnT,cAAC+H,EAAK,CAACC,SAAO,IACtBkL,UAAWK,EAAMtB,KACjBA,KAAMA,IAAMH,GAAcyB,EAAOC,KAGnCxT,cAACyD,IAAS,CAAChD,UAAW8E,IAAUC,QAAQlH,SACtC0B,cAAC+H,EAAK,CAAC/F,QAASA,GAAW,wBAKjChC,cAACyD,IAAS,CAAChD,UAAW8E,IAAUC,QAAQlH,SACtC0B,cAAC+H,EAAK,CAACC,SAAO,SAMpBhI,cAACqF,IAAG,CAACC,GAAI,EAAG7E,UAAU,+BAA8BnC,SAClD0B,cAAC0R,GAAY,QAIrB,ECiIe4C,OArOf,WAAyB,IAADlM,EAAAC,EAAAC,EAAAC,EAEpB,MAAO3D,EAAQC,GAAapG,mBAAS,CAAC,IAG/B+J,EAAUC,GAAehK,mBAAS,CACrCiK,MAAO,GACPC,KAAM,GACNC,QAAS,GACTC,MAAO,MAEL,MAAEH,EAAK,KAAEC,EAAI,QAAEC,EAAO,MAAEC,GAAUL,EAGlCM,EAAa9H,iBAAO,MACpBrC,EAAUC,eACV,GAAEQ,GAAOqT,cAGf1S,qBAAU,KACchB,WAChB,IACI,MAAM,KAAEC,SAAelC,EAAMmC,IAAI,UAAUG,OACrC,MAAEsJ,EAAK,KAAEC,EAAI,QAAEC,EAAO,MAAEC,EAAK,UAAE4D,GAAczN,EAG/CyN,EACAhE,EAAY,CAAEC,QAAOC,OAAMC,UAASC,UAEpClK,EAAQmB,KAAK,IAErB,CAAE,MAAOT,GACLqO,QAAQoF,IAAIzT,EAChB,GAGJR,EAAa,GACd,CAACF,EAASS,IAGb,MAAM4F,EAAgB9D,IAClBuH,EAAY,IACLD,EACH,CAACtH,EAAMG,OAAO4D,MAAO/D,EAAMG,OAAOnB,OACpC,GAIC6I,EAAcC,GAAmBvK,mBAAS,MAiD3CwK,EACFzI,eAAA,OAAKC,UAAU,cAAanC,SAAA,CACxBkC,eAACkF,IAAKG,MAAK,CAAAvH,SAAA,CACP0B,cAAC0F,IAAKK,MAAK,CAAAzH,SAAC,UACZ0B,cAAC0F,IAAKM,QAAO,CACTE,KAAK,OACLjB,KAAK,QACLkB,YAAY,iCACZjG,MAAOwI,EACPtC,SAAUpB,OAGX,OAANJ,QAAM,IAANA,GAAa,QAAPwD,EAANxD,EAAQ8D,aAAK,IAAAN,OAAP,EAANA,EAAe/B,KAAI,CAACrE,EAASsE,IAC1BtG,cAACuG,IAAK,CAACtE,QAAQ,UAAS3D,SACnB0D,GADyBsE,KAKlC9F,eAACkF,IAAKG,MAAK,CAAAvH,SAAA,CACP0B,cAAC0F,IAAKK,MAAK,CAAAzH,SAAC,SACZ0B,cAAC0F,IAAKM,QAAO,CACTE,KAAK,OACLjB,KAAK,OACLkB,YAAY,+BACZjG,MAAOyI,EACPvC,SAAUpB,OAGX,OAANJ,QAAM,IAANA,GAAY,QAANyD,EAANzD,EAAQ+D,YAAI,IAAAN,OAAN,EAANA,EAAchC,KAAI,CAACrE,EAASsE,IACzBtG,cAACuG,IAAK,CAACtE,QAAQ,UAAS3D,SACnB0D,GADyBsE,KAIlC9F,eAACkF,IAAKG,MAAK,CAAAvH,SAAA,CACP0B,cAAC0F,IAAKK,MAAK,CAAAzH,SAAC,YACZ0B,cAAC0F,IAAKM,QAAO,CACTkD,GAAG,WACHC,KAAM,EACNlE,KAAK,UACLkB,YAAY,sCACZjG,MAAO0I,EACPxC,SAAUpB,OAGX,OAANJ,QAAM,IAANA,GAAe,QAAT0D,EAAN1D,EAAQgE,eAAO,IAAAN,OAAT,EAANA,EAAiBjC,KAAI,CAACrE,EAASsE,IAC5BtG,cAACuG,IAAK,CAACtE,QAAQ,UAAS3D,SACnB0D,GADyBsE,KAMlCtG,cAACwG,IAAM,CACH/F,UAAW,GAAGgG,IAAUD,UAAUC,IAAU2C,OAC5ClG,QAASA,IAAMvE,EAAQ0K,SAAS/K,SACnC,WAGD0B,cAACwG,IAAM,CACH/F,UAAW,GAAGgG,IAAUD,UAAUC,IAAU2C,OAAQlD,KAAK,SAAQ5H,SAAC,YAM9E,OACI0B,cAAC0F,IAAI,CAACC,SAhGW5G,UAAkB,IAADwV,EAClCrT,EAAM0E,iBAEN,MAAM0D,EAAW,IAAIC,SACfiL,EAAWC,SAAShX,aAAaC,QAAQ,WAAY,IAE3D4L,EAASE,OAAO,QAASd,GACzBY,EAASE,OAAO,OAAQb,GACxBW,EAASE,OAAO,UAAWZ,GACb,OAAVE,QAAU,IAAVA,GAAmB,QAATyL,EAAVzL,EAAY3H,eAAO,IAAAoT,GAAnBA,EAAqB9K,MAAM,IAC3BH,EAASE,OAAO,QAASV,EAAW3H,QAAQsI,MAAM,IAEtDH,EAASE,OAAO,SAAUgL,GAE1B,UACU1X,EAAMyS,IAAI,UAAUnQ,KAAOkK,EAAU,CACvCrM,QAAS,CACLiC,cAAe,UAAUzB,aAAaC,QAAQ,kBAC9C,eAAgB,yBAIxBiB,EAAQmB,KAAK,UAAUV,IAC3B,CAAE,MAAOC,GAAM,IAADC,EACwBsK,EAAlC,GAA6B,OAAb,QAAZtK,EAAAD,EAAIE,gBAAQ,IAAAD,OAAA,EAAZA,EAAcE,QACdqF,EAAsB,QAAb+E,EAACvK,EAAIE,gBAAQ,IAAAqK,OAAA,EAAZA,EAAc5K,KAEhC,GAqE6BV,SACzBkC,eAAC4E,IAAG,CAAA9G,SAAA,CAEA0B,cAACqF,IAAG,CAAC5E,UAAU,kBAAkB6E,GAAI,EAAGuE,GAAI,EAAEvL,SAC1CkC,eAACiD,IAAS,CACNhD,UAAW,GAAG8E,IAAUC,WAAW9E,IAAO+C,sDAAsDnF,SAAA,CAEhGkC,eAACkF,IAAKG,MAAK,CAACpF,UAAU,cAAanC,SAAA,CAC9ByK,EAEG/I,cAAA,OACII,IAAK2I,EACLxI,IAAI,GACJE,UAAU,iBACVqJ,MAAO,CAAEC,UAAW,QAASC,UAAW,WAI5ChK,cAAC+H,EAAK,CACF/F,QAAQ,kCACRgG,SAAS,EACT5H,IAAK,OAKbJ,cAAC0F,IAAKK,MAAK,CACPtF,UAAW,GAAGgG,IAAUwD,gBAAgBxD,IAAU2C,gBAClDc,QAAQ,eAAc5L,SAErBuK,EAAQ,mBACLrI,eAAA,OAAKC,UAAU,wCAAuCnC,SAAA,CAClD0B,cAAA,KAAGS,UAAU,kCAAoC,uBAO7DT,cAAC0F,IAAKM,QAAO,CACT5G,GAAG,eACH8G,KAAK,OACLiE,OAAO,UACP/D,SA1JDlF,IACvB,GAAIA,EAAMG,OAAOoI,MAAMW,OAAQ,CAC3B,MAAMC,EAAOnJ,EAAMG,OAAOoI,MAAM,GAGhCT,EAAgBwB,IAAIG,gBAAgBN,IAEpC5B,EAAY,IACLD,EACHK,MAAOwB,GAEf,GAgJwBtJ,IAAK+H,EACLrI,UAAU,cAGX,OAANmE,QAAM,IAANA,GAAa,QAAP2D,EAAN3D,EAAQiE,aAAK,IAAAN,OAAP,EAANA,EAAelC,KAAI,CAACrE,EAASsE,IAC1BtG,cAACuG,IAAK,CAACtE,QAAQ,UAAS3D,SACnB0D,GADyBsE,KAKlCtG,cAAA,OAAKS,UAAU,YAAWnC,SAAE2K,SAKpCjJ,cAACqF,IAAG,CAACC,GAAI,EAAGuE,GAAI,EAAGpJ,UAAU,+BAA8BnC,SACvD0B,cAACyD,IAAS,CAAChD,UAAW8E,IAAUC,QAAQlH,SAAE2K,UAK9D,E,sCCnDeyL,OAxKf,WAAqB,IAADC,EAAAC,EAEhB,MAAOnB,EAAWC,GAAgBjV,oBAAS,IACpCoW,EAAWC,GAAgBrW,mBAAS,CAAE4P,QAAS,KAGhD9P,EAAcN,KACd,GAAEmB,GAAOqT,cAGTpC,EPzB0BnS,qBAAWgS,KO0BrC,SAAEK,EAAQ,mBAAEG,GAAuBP,KAGnCU,GAAe,OAARN,QAAQ,IAARA,GAAiB,QAAToE,EAARpE,EAAUlC,eAAO,IAAAsG,OAAT,EAARA,EAAoB,KAAM,KAGjClI,GAAuB,OAAXlO,QAAW,IAAXA,OAAW,EAAXA,EAAaiG,aAAiB,OAAJqM,QAAI,IAAJA,OAAI,EAAJA,EAAMrM,UAElDzE,qBAAU,KACN,IAAKX,EAAI,OAGT0V,EAAa,CAAEzG,QAAS,KACxBqF,GAAa,GAGK3U,WACd,IACI,OAASC,KAAM+V,IAAkB/V,KAAMgW,UAAyBpX,QAAQiV,IAAI,CACxE/V,EAAMmC,IAAI,SAASG,MACnBtC,EAAMmC,IAAI,kBAAkBG,OAGhCiR,GAAYhO,IAAI,IACTA,EACHkO,SAAU,CAAElC,QAAS,CAAC0G,QAG1BD,EAAaE,GACbtB,GAAa,EACjB,CAAE,MAAOrU,GACLqO,QAAQ/P,MAAM,4BAA6B0B,EAC/C,GAGJ4V,EAAW,GACZ,CAAC7V,EAAIiR,EAAa9R,IAGrB,MAAM2W,EAAiBnW,UACd8R,SACCH,EAAmBG,EAAKzR,GAAG,EAI/B+V,EACF3U,eAAAyC,WAAA,CAAA3E,SAAA,EAES,OAAJuS,QAAI,IAAJA,OAAI,EAAJA,EAAMuE,WAAYpV,cAAC4L,GAAgB,CAACxM,GAAQ,OAAJyR,QAAI,IAAJA,OAAI,EAAJA,EAAMzR,KAC/CoB,eAAC4E,IAAG,CAACiQ,WAAS,EAAC5U,UAAU,mBAAkBnC,SAAA,CACvC0B,cAACqF,IAAG,CAACwE,GAAI,EAAGpJ,UAAU,eAAcnC,SAChC0B,cAAC+G,IAAK,CACFtG,UAAWC,KAAO4U,eAClBC,eAAa,EACbnV,IACQ,OAAJyQ,QAAI,IAAJA,KAAMzN,gBACA,GAAGyN,EAAKzN,mBAAmBjB,KAAKC,QAChC,2FAEVoT,QAAUzK,IACNA,EAAE1J,OAAOjB,IAAM,0FAA0F,MAIrHI,eAAC6E,IAAG,CAACwE,GAAI,EAAEvL,SAAA,CACP0B,cAAA,MAAIS,UAAU,MAAKnC,UAAM,OAAJuS,QAAI,IAAJA,OAAI,EAAJA,EAAMrM,WAAY,SACvChE,eAAC4E,IAAG,CAAC3E,UAAU,oCAAmCnC,SAAA,CAC9CkC,eAAC6E,IAAG,CAACoQ,GAAI,EAAGhV,UAAU,OAAMnC,SAAA,CACxB0B,cAAA,OAAA1B,SAAU,OAAJuS,QAAI,IAAJA,OAAI,EAAJA,EAAME,YACZ/Q,cAAA,OAAA1B,SAAK,iBAETkC,eAAC6E,IAAG,CAACoQ,GAAI,EAAGhV,UAAU,OAAMnC,SAAA,CACxB0B,cAAA,OAAA1B,SAAuB,QAAvBsW,EAAU,OAAJ/D,QAAI,IAAJA,OAAI,EAAJA,EAAM6E,mBAAW,IAAAd,IAAI,IAC3B5U,cAAA,OAAA1B,SAAK,aAETkC,eAAC6E,IAAG,CAACoQ,GAAI,EAAGhV,UAAU,OAAMnC,SAAA,CACxB0B,cAAA,OAAA1B,SAAMmO,EAAuB,OAAXlO,QAAW,IAAXA,OAAW,EAAXA,EAAa2S,UAAgB,OAAJL,QAAI,IAAJA,OAAI,EAAJA,EAAMK,YACjDlR,cAAA,OAAA1B,SAAK,uBAIjB0B,cAACqF,IAAG,CAACwE,GAAI,EAAGpJ,UAAU,gBAAenC,SAEhCC,IAAgBkO,IACT,OAAJoE,QAAI,IAAJA,KAAMC,aACF9Q,cAACwG,IAAM,CACH/F,UAAW,GAAGgG,IAAUD,UAAUC,IAAUgL,eAC5CvO,QAASgS,EAAe5W,SAC3B,aAID0B,cAACwG,IAAM,CACH/F,UAAW,GAAGgG,IAAUD,UAAUC,IAAUkP,QAC5CzS,QAASgS,EAAe5W,SAC3B,eAMR,OAAJuS,QAAI,IAAJA,OAAI,EAAJA,EAAM+E,MAAO5V,cAACqF,IAAG,CAAC5E,UAAU,MAAKnC,SAAEuS,EAAK+E,YAM/CC,EACFrV,eAAAyC,WAAA,CAAA3E,SAAA,CACI0B,cAAA,SACAQ,eAAA,KAAGC,UAAU,cAAanC,SAAA,CAAM,OAAJuS,QAAI,IAAJA,OAAI,EAAJA,EAAMrM,SAAS,cAC3CxE,cAAA,SACC6U,EAAUxG,QAAQjE,OACfpK,cAACgT,KAAc,CACXC,WAAY4B,EAAUxG,QAAQjE,OAC9B6H,KAAMA,IAAMH,GAAc+C,EAAWC,GACrC5B,UAAW2B,EAAU5C,KACrBkB,OAAQnT,cAAC+H,EAAK,CAACC,SAAO,IAAI1J,SAEzBuW,EAAUxG,QAAQhI,KAAKnJ,GACpB8C,cAAC+L,GAAI,IAAmB7O,EAAMsW,SAAUsB,GAA7B5X,EAAKkC,QAIxBoB,eAAA,OAAKC,UAAU,kBAAiBnC,SAAA,CAC5B0B,cAAC8V,KAAe,CAACC,KAAMC,KAAmBzL,KAAK,OAC/C/J,eAAA,KAAAlC,SAAA,CAAG,qBAAuB,OAAJuS,QAAI,IAAJA,OAAI,EAAJA,EAAMrM,SAAS,+BAMrD,OACIhE,eAAC4E,IAAG,CAAA9G,SAAA,CAEAkC,eAAC6E,IAAG,CAAC5E,UAAU,kBAAkBoJ,GAAI,EAAEvL,SAAA,CACnC0B,cAAC0R,GAAY,CAACL,QAAM,IACpBrR,cAACyD,IAAS,CAAChD,UAAW8E,IAAUC,QAAQlH,SACnCmV,EACGjT,eAAAyC,WAAA,CAAA3E,SAAA,CACK6W,EACAU,KAGL7V,cAAC+H,EAAK,CAACC,SAAO,SAM1BhI,cAACqF,IAAG,CAACwE,GAAI,EAAGpJ,UAAU,+BAA8BnC,SAChD0B,cAAC0R,GAAY,QAI7B,EC3DeuE,OAhHMA,KAAO,IAADhS,EAEvB,MAAOO,EAAU0R,GAAezX,mBAAS,KAGlCmG,EAAQC,GAAapG,mBAAS,CAAC,IAGhC,UAAEqD,GAAcJ,IAGhB/C,EAAUC,eACV,GAAEQ,GAAOqT,cAGTlU,EAAcN,IACdO,EAAiBL,IAGvB4B,qBAAU,KAAO,IAADoW,GACG,OAAX5X,QAAW,IAAXA,GAAe,QAAJ4X,EAAX5X,EAAaa,UAAE,IAAA+W,OAAJ,EAAXA,EAAiBC,cAAehX,GAEhCT,EAAQmB,KAAK,IACjB,GACD,CAACvB,EAAaI,EAASS,IAmC1B,YAAoBV,IAAhBH,EACO,KAIPyB,cAACoF,IAAG,CAAA9G,SACA0B,cAACqF,IAAG,CAAC5E,UAAU,2BAA2B6E,GAAI,EAAEhH,SAC5C0B,cAACyD,IAAS,CAAChD,UAAW8E,IAAUC,QAAQlH,SACpCkC,eAACkF,IAAI,CAACC,SAxCD5G,UAIjB,GAHAmC,EAAM0E,iBAGFpB,EAAS4F,OAAS,GAClBvF,EAAU,CAAEL,SAAU,CAAC,gDAI3B,UAEU1H,EAAMuZ,MAAM,sBAAuB,CACrC7R,aAIJhG,GAAgB8X,IAAQ,IACjBA,EACH9R,eAEJ1C,EAAU,CAAEE,QAAS,gCAAiCC,QAAS,YAG/DtD,EAAQ0K,QACZ,CAAE,MAAOhK,GAAM,IAADC,EACVoO,QAAQoF,IAAIzT,GAEZwF,GAAsB,QAAZvF,EAAAD,EAAIE,gBAAQ,IAAAD,OAAA,EAAZA,EAAcN,OAAQ,CAAC,EACrC,GAY0CyB,UAAU,OAAMnC,SAAA,CAC1CkC,eAACkF,IAAKG,MAAK,CAAAvH,SAAA,CACP0B,cAAC0F,IAAKK,MAAK,CAAAzH,SAAC,oBACZ0B,cAAC0F,IAAKM,QAAO,CACTG,YAAY,WACZD,KAAK,OACLhG,MAAOsE,EACP4B,SAAWlF,GAAUgV,EAAYhV,EAAMG,OAAOnB,OAC9CqW,UAAW,GACXC,aAAa,MACbC,YAAY,OAKb,OAAN7R,QAAM,IAANA,GAAgB,QAAVX,EAANW,EAAQJ,gBAAQ,IAAAP,OAAV,EAANA,EAAkBoC,KAAI,CAACrE,EAASsE,IAC7BtG,cAACuG,IAAK,CAAWtE,QAAQ,UAAS3D,SAC7B0D,GADOsE,KAMhBtG,cAACwG,IAAM,CACHN,KAAK,SACLzF,UAAW,GAAGgG,IAAUD,UAAUC,IAAU2C,YAC5ClG,QAASA,IAAMvE,EAAQ0K,SAAS/K,SACnC,WAKD0B,cAACwG,IAAM,CACH/F,UAAW,GAAGgG,IAAUD,UAAUC,IAAU2C,OAC5ClD,KAAK,SACLU,UAAWpC,EAASsK,OAAOxQ,SAC9B,iBAMX,EC0DCoY,OA1KUA,KAAO,IAADC,EAAAC,EAAAvS,EAC3B,MAAM1F,EAAUC,eACV,GAAEQ,GAAOqT,cACTlU,EAAcN,KAEb2J,EAAUyI,GAAe5R,mBAAS,CACrCoY,cAAe,GACfC,cAAe,MAEb,cAAED,EAAa,cAAEC,GAAkBlP,GAGlChD,EAAQC,GAAapG,mBAAS,CAAC,IAE/BsY,EAAeC,GAAoBvY,mBAAS,OAE5CqG,EAAcC,GAAmBtG,oBAAS,GAG3CuG,EAAgB9D,IAClBmP,EAAY,IACLzI,EACH,CAAC1G,EAAMG,OAAO4D,MAAO/D,EAAMG,OAAOnB,QAItC2E,EAAU,CAAC,GACXmS,EAAiB,KAAK,EAI1BjX,qBAAU,KAAO,IAADoW,GACG,OAAX5X,QAAW,IAAXA,GAAe,QAAJ4X,EAAX5X,EAAaa,UAAE,IAAA+W,OAAJ,EAAXA,EAAiBC,cAAehX,GAChCT,EAAQmB,KAAK,IACjB,GACD,CAACvB,EAAaa,EAAIT,IAErB,MAsCMsY,GACDJ,EAAc/H,SACdgI,EAAchI,QACf+H,IAAkBC,GAClBhS,EAEJ,OACI9E,cAACoF,IAAG,CAAA9G,SACA0B,cAACqF,IAAG,CAAC5E,UAAU,2BAA2B6E,GAAI,EAAEhH,SAC5C0B,cAACyD,IAAS,CAAChD,UAAW8E,IAAUC,QAAQlH,SACpCkC,eAACkF,IAAI,CAACC,SAhDD5G,UAIjB,GAHAmC,EAAM0E,iBAGFiR,IAAkBC,EAGlB,OAFAjS,EAAU,CAAEiS,cAAe,CAAC,kCAC5BE,EAAiB,MAKrBjS,GAAgB,GAChBF,EAAU,CAAC,GACXmS,EAAiB,MAEjB,UAEUla,EAAMI,KAAK,iCAAkC0K,GAEnDoP,EAAiB,CAAE9Q,KAAM,UAAW5F,KAAM,mCAC1CyE,GAAgB,GAEhBzC,YAAW,KACP3D,EAAQ0K,QAAQ,GACjB,KACP,CAAE,MAAOhK,GAAM,IAADC,EACVyF,GAAgB,GAEhBF,GACgB,QAAZvF,EAAAD,EAAIE,gBAAQ,IAAAD,OAAA,EAAZA,EAAcN,OAAQ,CAClBmG,iBAAkB,CAAC,6CAG3B6R,EAAiB,KACrB,GAcyC1Y,SAAA,CAEzBkC,eAACkF,IAAKG,MAAK,CAAAvH,SAAA,CACP0B,cAAC0F,IAAKK,MAAK,CAAAzH,SAAC,iBACZ0B,cAAC0F,IAAKM,QAAO,CACTG,YAAY,eACZD,KAAK,WACLhG,MAAO2W,EACPzQ,SAAUpB,EACVC,KAAK,gBACLuR,aAAa,eACb5P,SAAU9B,OAKX,OAANF,QAAM,IAANA,GAAqB,QAAf+R,EAAN/R,EAAQiS,qBAAa,IAAAF,OAAf,EAANA,EAAuBtQ,KAAI,CAACrE,EAASsE,IAClCtG,cAACuG,IAAK,CAAWtE,QAAQ,UAAUxB,UAAU,OAAMnC,SAC9C0D,GADOsE,KAMhB9F,eAACkF,IAAKG,MAAK,CAAAvH,SAAA,CACP0B,cAAC0F,IAAKK,MAAK,CAAAzH,SAAC,qBACZ0B,cAAC0F,IAAKM,QAAO,CACTG,YAAY,uBACZD,KAAK,WACLhG,MAAO4W,EACP1Q,SAAUpB,EACVC,KAAK,gBACLuR,aAAa,eACb5P,SAAU9B,OAKX,OAANF,QAAM,IAANA,GAAqB,QAAfgS,EAANhS,EAAQkS,qBAAa,IAAAF,OAAf,EAANA,EAAuBvQ,KAAI,CAACrE,EAASsE,IAClCtG,cAACuG,IAAK,CAAWtE,QAAQ,UAAUxB,UAAU,OAAMnC,SAC9C0D,GADOsE,KAMT,OAAN1B,QAAM,IAANA,GAAwB,QAAlBP,EAANO,EAAQO,wBAAgB,IAAAd,OAAlB,EAANA,EAA0BgC,KAAI,CAACrE,EAASsE,IACrCtG,cAACuG,IAAK,CAAWtE,QAAQ,UAAUxB,UAAU,OAAMnC,SAC9C0D,GADOsE,KAMfyQ,GACG/W,cAACuG,IAAK,CACFtE,QAAgC,YAAvB8U,EAAc7Q,KAAqB,UAAY,OACxDzF,UAAU,OAAMnC,SAEfyY,EAAczW,OAKvBN,cAACwG,IAAM,CACHN,KAAK,SACLzF,UAAW,GAAGgG,IAAUD,UAAUC,IAAU2C,YAC5ClG,QAASA,IAAMvE,EAAQ0K,SACvBzC,SAAU9B,EAAaxG,SAC1B,WAKD0B,cAACwG,IAAM,CACHN,KAAK,SACLzF,UAAW,GAAGgG,IAAUD,UAAUC,IAAU2C,OAC5CxC,SAAUqQ,EAAe3Y,SAExBwG,EAAe,YAAc,iBAK5C,ECyECoS,OA1OMA,KAAO,IAADC,EAAAC,EAEvB,MAAM7Y,EAAcN,IACdO,EAAiBL,KAGjB,GAAEiB,GAAOqT,eAGT,UAAE3Q,GAAcJ,IAGhB/C,EAAUC,cAGVyY,EAAYrW,oBAGX4G,EAAUyI,GAAe5R,mBAAS,CACrCmX,IAAK,GACLxS,gBAAiB,MAEf,IAAEwS,EAAG,gBAAExS,GAAoBwE,GAG1BhD,EAAQC,GAAapG,mBAAS,CAAC,IAG/B6Y,EAAYC,GAAiB9Y,oBAAS,GAG7CsB,qBAAU,IACC,KACCqD,GAAmBA,EAAgBkH,WAAW,UAC9CE,IAAIC,gBAAgBrH,EACxB,GAEL,CAACA,IAGJrD,qBAAU,KACchB,WAAa,IAADoX,EAE5B,IAAe,OAAX5X,QAAW,IAAXA,GAAe,QAAJ4X,EAAX5X,EAAaa,UAAE,IAAA+W,OAAJ,EAAXA,EAAiBC,cAAehX,EAChC,IAEI,MAAM,KAAEJ,SAAelC,EAAMmC,IAAI,UAAUG,OACrC,IAAEwW,EAAG,gBAAExS,GAAoBpE,EAGjCqR,EAAY,CACRuF,MACAxS,gBAAiBA,GAAmB,IAE5C,CAAE,MAAO/D,GAELqO,QAAQoF,IAAIzT,GACZV,EAAQmB,KAAK,IACjB,MAGAnB,EAAQmB,KAAK,IACjB,EAGJjB,EAAa,GACd,CAACN,EAAaI,EAASS,IAG1B,MAuDM6J,EACFzI,eAAAyC,WAAA,CAAA3E,SAAA,CACIkC,eAACkF,IAAKG,MAAK,CAAAvH,SAAA,CACP0B,cAAC0F,IAAKK,MAAK,CAAAzH,SAAC,QACZ0B,cAAC0F,IAAKM,QAAO,CACTkD,GAAG,WACHhJ,MAAO0V,EACPxP,SA9DMlF,IAClBmP,EAAY,IACLzI,EACH,CAAC1G,EAAMG,OAAO4D,MAAO/D,EAAMG,OAAOnB,OACpC,EA2DU+E,KAAK,MACLkE,KAAM,EACNvC,SAAU0Q,IAGP,OAAN1S,QAAM,IAANA,GAAW,QAALuS,EAANvS,EAAQgR,WAAG,IAAAuB,OAAL,EAANA,EAAa9Q,KAAI,CAACrE,EAASsE,IACxBtG,cAACuG,IAAK,CAACtE,QAAQ,UAAS3D,SACnB0D,GADyBsE,QAOtCtG,cAACwG,IAAM,CACHN,KAAK,SACLzF,UAAW,GAAGgG,IAAUD,UAAUC,IAAU2C,YAC5ClG,QAASA,IAAMvE,EAAQ0K,SACvBzC,SAAU0Q,EAAWhZ,SACxB,WAKD0B,cAACwG,IAAM,CACH/F,UAAW,GAAGgG,IAAUD,UAAUC,IAAU2C,OAC5ClD,KAAK,SACLU,SAAU0Q,EAAWhZ,SAEpBgZ,EAAa,YAAc,YAKxC,OACItX,cAAC0F,IAAI,CAACC,SAzFW5G,UAAkB,IAADyY,EAClCtW,EAAM0E,iBACN2R,GAAc,GAGd,MAAMjO,EAAW,IAAIC,SACrBD,EAASE,OAAO,MAAOoM,GAGF,QAArB4B,EAAIH,EAAUlW,eAAO,IAAAqW,GAAjBA,EAAmB/N,MAAM,IACzBH,EAASE,OAAO,kBAAmB6N,EAAUlW,QAAQsI,MAAM,IAG/D,IAEI,MAAM,KAAEzK,SAAelC,EAAMuZ,MAAM,UAAUjX,KAAOkK,EAAU,CAC1DrM,QAAS,CAAE,eAAgB,yBAI/BoT,EAAY,CACRuF,IAAK5W,EAAK4W,IACVxS,gBAAiBpE,EAAKoE,kBAI1B5E,GAAgB8X,IAAQ,IACjBA,EACHlT,gBAAiBpE,EAAKoE,oBAG1BtB,EAAU,CAAEE,QAAS,4BAA6BC,QAAS,YAG3DK,YAAW,KACP3D,EAAQ0K,QAAQ,GACjB,IACP,CAAE,MAAOhK,GAAM,IAADC,EAAAsK,EAEV8D,QAAQ/P,MAAM,SAAsB,QAAd2B,EAAED,EAAIE,gBAAQ,IAAAD,OAAA,EAAZA,EAAcN,MACtC6F,GAAsB,QAAZ+E,EAAAvK,EAAIE,gBAAQ,IAAAqK,OAAA,EAAZA,EAAc5K,OAAQ,CAAC,EACrC,CAAC,QACGuY,GAAc,EAClB,GA8C6BjZ,SACzBkC,eAAC4E,IAAG,CAAA9G,SAAA,CAEA0B,cAACqF,IAAG,CAAC5E,UAAU,8BAA8B6E,GAAI,EAAGuE,GAAI,EAAEvL,SACtDkC,eAACiD,IAAS,CAAChD,UAAW8E,IAAUC,QAAQlH,SAAA,CACpCkC,eAACkF,IAAKG,MAAK,CAAAvH,SAAA,CACP0B,cAAA,UAAA1B,SACI0B,cAAC+G,IAAK,CACF3G,IACIgD,GAEM,2FAEVqU,OAAK,EACLlX,IAAK,IAAc,OAAXhC,QAAW,IAAXA,OAAW,EAAXA,EAAaiG,WAAY,uBAKlC,OAANI,QAAM,IAANA,GAAuB,QAAjBwS,EAANxS,EAAQxB,uBAAe,IAAAgU,OAAjB,EAANA,EAAyB/Q,KAAI,CAACrE,EAASsE,IACpCtG,cAACuG,IAAK,CAACtE,QAAQ,UAAS3D,SACnB0D,GADyBsE,KAKlCtG,cAAA,OAAA1B,SAEI0B,cAAC0F,IAAKK,MAAK,CACPtF,UAAW,GAAGgG,IAAUD,UAAUC,IAAU2C,mBAC5Cc,QAAQ,eAAc5L,SACzB,uBAML0B,cAAC0F,IAAKM,QAAO,CACT5G,GAAG,eACH2B,IAAKsW,EACLnR,KAAK,OACLiE,OAAO,UACP/D,SAAW2E,IAEHA,EAAE1J,OAAOoI,MAAMW,QACfiG,EAAY,IACLzI,EACHxE,gBAAiBoH,IAAIG,gBAAgBI,EAAE1J,OAAOoI,MAAM,KAE5D,EAEJ7C,SAAU0Q,OAKlBtX,cAAA,OAAKS,UAAU,YAAWnC,SAAE2K,SAKpCjJ,cAACqF,IAAG,CAACC,GAAI,EAAGuE,GAAI,EAAGpJ,UAAU,2CAA0CnC,SACnE0B,cAACyD,IAAS,CAAChD,UAAW8E,IAAUC,QAAQlH,SAAE2K,UAG/C,ECjOf,SAASyO,GAAcrZ,GAAqC,IAAlCsZ,UAAWC,KAAcC,GAAMxZ,EACvD,MAAME,EAAcN,IACpB,OACE+B,cAAC8X,IAAK,IACAD,EACJE,OAAS/L,GACPzN,EACEyB,cAAC4X,EAAS,IAAK5L,IAEfhM,cAACoT,IAAQ,CACPrQ,GAAI,CACF2G,SAAU,UACVjC,MAAO,CAAEuQ,KAAMhM,EAAM1E,cAOnC,CAMA,SAAS2Q,GAAuBlW,GAAqC,IAAlC4V,UAAWC,KAAcC,GAAM9V,EAChE,MAAMxD,EAAcN,IACpB,OACE+B,cAAC8X,IAAK,IACAD,EACJE,OAAS/L,GACNzN,EAGCyB,cAACoT,IAAQ,CAACrQ,GAAG,MAFb/C,cAAC4X,EAAS,IAAK5L,KAOzB,CAKA,SAASkM,KACP,OACE1X,eAAA,OAAKsJ,MAAO,CAAEqO,QAAS,OAAQC,UAAW,UAAW9Z,SAAA,CACnD0B,cAAA,MAAA1B,SAAI,yBACJ0B,cAAA,KAAA1B,SAAG,6CAGT,CAiEe+Z,OA/Df,WACE,OACErY,cAAC5B,EAAmB,CAAAE,SAClB0B,cAACoQ,GAAgB,CAAA9R,SACfkC,eAAA,OAAKC,UAAWC,IAAO2X,IAAI/Z,SAAA,CAEzB0B,cAAC0C,EAAM,IACP1C,cAACyD,IAAS,CAAChD,UAAWC,IAAO4X,KAAKha,SAChCkC,eAAC+X,IAAM,CAAAja,SAAA,CAEL0B,cAAC8X,IAAK,CACJpU,OAAK,EACL8U,KAAK,IACLT,OAAQA,IACN/X,cAACqT,GAAS,CAACrR,QAAQ,mDAGvBhC,cAAC8X,IAAK,CACJpU,OAAK,EACL8U,KAAK,QACLT,OAAQA,IACN/X,cAACqT,GAAS,CACRrR,QAAQ,gEACRO,OAAO,eAIbvC,cAAC8X,IAAK,CACJpU,OAAK,EACL8U,KAAK,SACLT,OAAQA,IACN/X,cAACqT,GAAS,CACRrR,QAAQ,8DACRO,OAAO,YAMbvC,cAACiY,GAAuB,CAACvU,OAAK,EAAC8U,KAAK,UAAUb,UAAWzQ,IACzDlH,cAACiY,GAAuB,CAACvU,OAAK,EAAC8U,KAAK,UAAUb,UAAW3T,IAGzDhE,cAAC0X,GAAc,CAAChU,OAAK,EAAC8U,KAAK,gBAAgBb,UAAWxP,KACtDnI,cAAC0X,GAAc,CAAChU,OAAK,EAAC8U,KAAK,kBAAkBb,UAAWrD,KACxDtU,cAAC0X,GAAc,CAAChU,OAAK,EAAC8U,KAAK,2BAA2Bb,UAAW1B,KACjEjW,cAAC0X,GAAc,CAAChU,OAAK,EAAC8U,KAAK,2BAA2Bb,UAAWjB,KACjE1W,cAAC0X,GAAc,CAAChU,OAAK,EAAC8U,KAAK,kBAAkBb,UAAWT,KAGxDlX,cAAC8X,IAAK,CAACpU,OAAK,EAAC8U,KAAK,aAAab,UAAWnF,KAC1CxS,cAAC8X,IAAK,CAACpU,OAAK,EAAC8U,KAAK,aAAab,UAAWjD,KAG1C1U,cAAC8X,IAAK,CAACH,UAAWO,gBAOhC,EChIeO,OAZSC,IAClBA,GAAeA,aAAuBC,UACxC,8BAAqBC,MAAKva,IAAkD,IAAjD,OAAEwa,EAAM,OAAEC,EAAM,OAAEC,EAAM,OAAEC,EAAM,QAAEC,GAAS5a,EACpEwa,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,EAAY,GAExB,ECsBaQ,OA3BMA,KACjB,MAAM,OAAEtX,EAAM,YAAEa,GAAgBf,IAEhC,OACI1B,cAAA,OACI8J,MAAO,CACHqP,SAAU,QACVC,IAAK,GACLC,MAAO,GACPC,OAAQ,KACRC,SAAU,KACZjb,SAEDsD,EAAOyE,KAAIhI,IAAA,IAAC,GAAEe,EAAE,QAAE4C,EAAO,QAAEC,GAAS5D,EAAA,OACjC2B,cAACuG,IAAK,CAEFtE,QAASA,EACTuX,QAASA,IAAM/W,EAAYrD,GAC3Bqa,aAAW,EAAAnb,SAEV0D,GALI5C,EAMD,KAEV,EChBdsa,IAAS3B,OACP/X,cAAC6K,IAAM8O,WAAU,CAAArb,SACf0B,cAAC4Z,IAAM,CAAAtb,SACL0B,cAAC5B,EAAmB,CAAAE,SAClB0B,cAACoQ,GAAgB,CAAA9R,SACfkC,eAACmB,EAAa,CAAArD,SAAA,CACZ0B,cAACkZ,GAAY,IACblZ,cAACqY,GAAG,eAMd/W,SAASuY,eAAe,SAM1BpB,I,qBC7BA7b,EAAOC,QAAU,CAAC,IAAM,0BAA0B,MAAQ,4BAA4B,OAAS,6BAA6B,KAAO,2BAA2B,UAAY,gCAAgC,UAAY,gCAAgC,UAAY,gC,qBCAlQD,EAAOC,QAAU,CAAC,OAAS,uBAAuB,QAAU,wBAAwB,OAAS,uB,qBCA7FD,EAAOC,QAAU,CAAC,aAAe,mCAAmC,aAAe,mCAAmC,eAAiB,qCAAqC,SAAW,+B,qBCAvLD,EAAOC,QAAU,CAAC,KAAO,oCAAoC,OAAS,sC,qBCAtED,EAAOC,QAAU,CAAC,KAAO,mBAAmB,MAAQ,oBAAoB,aAAe,2B,qBCAvFD,EAAOC,QAAU,CAAC,UAAY,sC,qBCA9BD,EAAOC,QAAU,CAAC,OAAS,wBAAwB,KAAO,sB,qBCA1DD,EAAOC,QAAU,CAAC,UAAY,6BAA6B,WAAa,8B,qBCAxED,EAAOC,QAAU,CAAC,OAAS,uB,qBCA3BD,EAAOC,QAAU,CAAC,MAAQ,qB,qBCA1BD,EAAOC,QAAU,CAAC,UAAY,wB,qBCA9BD,EAAOC,QAAU,CAAC,eAAiB,iC,oBCAnCD,EAAOC,QAAU,CAAC,OAAS,uBAAuB,KAAO,qBAAqB,KAAO,qBAAqB,YAAc,4BAA4B,OAAS,uBAAuB,MAAQ,sBAAsB,aAAe,6BAA6B,aAAe,6B","file":"static/js/main.84f99315.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"App\":\"App_App__ucaqW\",\"Main\":\"App_Main__2mzUn\",\"Content\":\"App_Content__3kRIm\",\"FillerImage\":\"App_FillerImage__2NazA\",\"Image\":\"App_Image__2QXsH\"};","export default __webpack_public_path__ + \"static/media/logo.67d1f052.png\";","import axios from \"axios\";\r\n\r\n// Determine the base API URL depending on environment\r\nconst apiUrl = process.env.NODE_ENV === \"development\"\r\n    ? \"http://localhost:8000\" // Local development server\r\n    : \"https://gamebits-579c6fd85599.herokuapp.com\"; // Production server (heroku)\r\n\r\n// Set the base URL for all axios requests to the API endpoint\r\naxios.defaults.baseURL = `${apiUrl}/api/`;\r\n// Default Content-Type for POST requests is multipart/form-data\r\naxios.defaults.headers.post[\"Content-Type\"] = \"multipart/form-data\";\r\n// Allow axios to send cookies with requests (needed for some auth setups)\r\naxios.defaults.withCredentials = true;\r\n\r\n//Add a request interceptor to inject JWT token into Authorization header if available\r\naxios.interceptors.request.use((config) => {\r\n    const token = localStorage.getItem(\"access_token\");\r\n    if (token) {\r\n        config.headers[\"Authorization\"] = `Bearer ${token}`;\r\n    }\r\n    return config;\r\n}, (error) => {\r\n    return Promise.reject(error);\r\n});\r\n\r\nexport default axios;","import { createContext, useContext, useEffect, useState, useCallback } from \"react\";\r\nimport axios from '../api/axiosDefaults';\r\nimport { useHistory } from 'react-router-dom';\r\n\r\n// Contexts to hold current user data and setter function\r\nexport const CurrentUserContext = createContext();\r\nexport const SetCurrentUserContext = createContext();\r\n\r\n// Custom hooks for consuming the contexts easily\r\nexport const useCurrentUser = () => useContext(CurrentUserContext);\r\nexport const useSetCurrentUser = () => useContext(SetCurrentUserContext);\r\n\r\nexport const CurrentUserProvider = ({ children }) => {\r\n    // State to store current user object or null (unauthenticated)\r\n    const [currentUser, setCurrentUser] = useState(undefined);\r\n    const history = useHistory();\r\n\r\n    // Helper functions to get tokens from localStorage\r\n    const getAccessToken = () => localStorage.getItem('access_token');\r\n    const getRefreshToken = () => localStorage.getItem('refresh_token');\r\n\r\n    // Function to run on mount - tries to fetch the current user info using access token,\r\n    // refreshes token if expired, or redirects to signin on failure\r\n    const handleMount = useCallback(async () => {\r\n\r\n        try {\r\n            const token = getAccessToken();\r\n\r\n            if (token) {\r\n                try {\r\n                    // Attempt to get current user info with the access token\r\n                    const { data } = await axios.get('users/current/', {\r\n                        headers: { Authorization: `Bearer ${token}` }\r\n                    });\r\n                    // Save user ID for quick access if needed\r\n                    localStorage.setItem('user_id', data.id);\r\n                    setCurrentUser(data);\r\n                } catch (err) {\r\n                    // If access token is expired or unauthorized, try refreshing\r\n                    if (err.response?.status === 401) {\r\n                        const refreshToken = getRefreshToken();\r\n\r\n                        if (refreshToken) {\r\n                            // Refresh the access token\r\n                            const response = await axios.post('token/refresh/', { refresh: refreshToken });\r\n                            const newAccessToken = response.data.access;\r\n                            localStorage.setItem('access_token', newAccessToken);\r\n\r\n                            // Retry fetching current user info with new access token\r\n                            const { data } = await axios.get('users/current/', {\r\n                                headers: { Authorization: `Bearer ${newAccessToken}` }\r\n                            });\r\n                            setCurrentUser(data);\r\n                        } else {\r\n                            // No refresh token available - throw to catch block below\r\n                            throw err;\r\n                        }\r\n                    } else {\r\n                        // Other error (not 401) - rethrow to catch block below\r\n                        throw err;\r\n                    }\r\n                }\r\n            } else {\r\n                // No access token, so user is unauthenticated\r\n                setCurrentUser(null);\r\n            }\r\n        } catch (err) {\r\n            // On any failure, clear tokens, reset user and redirect to sign in page\r\n            localStorage.removeItem('access_token');\r\n            localStorage.removeItem('refresh_token');\r\n            setCurrentUser(null);\r\n            history.push('/signin');\r\n        }\r\n    }, [history]);\r\n\r\n    // Run handleMount once on mount or when handleMount changes (which is rare here)\r\n    useEffect(() => {\r\n        handleMount();\r\n    }, [handleMount]);\r\n\r\n    // Provide currentUser and setCurrentUser via context to the component tree\r\n    return (\r\n        <CurrentUserContext.Provider value={currentUser}>\r\n            <SetCurrentUserContext.Provider value={setCurrentUser}>\r\n                {children}\r\n            </SetCurrentUserContext.Provider>\r\n        </CurrentUserContext.Provider>\r\n    );\r\n};\r\n","import React from 'react';\r\nimport styles from '../styles/Avatar.module.css';\r\n\r\n/**\r\n * Avatar component renders a user avatar image\r\n * and optional text next to it.\r\n */\r\nconst Avatar = ({ src, height = 45, text, alt = \"avatar\" }) => {\r\n    return (\r\n        <span>\r\n            <img\r\n                className={styles.Avatar}\r\n                src={src}\r\n                height={height}\r\n                width={height}\r\n                alt={alt || text || \"user avatar\"}\r\n            />\r\n            {text && <span> {text} </span>}\r\n        </span>\r\n    );\r\n};\r\n\r\nexport default Avatar;\r\n","import { useEffect, useRef, useState } from 'react'\r\n\r\nconst useClickOutsideToggle = () => {\r\n    const [expanded, setExpanded] = useState(false);\r\n    const ref = useRef(null);\r\n    useEffect(() => {\r\n        // Close dropdown if click happens outside referenced element\r\n        const handleClickOutside = (event) => {\r\n            if (ref.current && !ref.current.contains(event.target)) {\r\n                setExpanded(false)\r\n            }\r\n        };\r\n\r\n        document.addEventListener('mousedown', handleClickOutside)\r\n        return () => {\r\n            document.removeEventListener('mousedown', handleClickOutside)\r\n        };\r\n    }, [ref]);\r\n\r\n    return { expanded, setExpanded, ref };\r\n};\r\n\r\nexport default useClickOutsideToggle;","import React, { createContext, useState, useContext, useCallback } from \"react\";\r\n\r\nconst AlertContext = createContext();\r\n\r\nexport const useAlert = () => useContext(AlertContext);\r\n\r\nexport const AlertProvider = ({ children }) => {\r\n    const [alerts, setAlerts] = useState([]);\r\n\r\n    // Add alert\r\n    const showAlert = useCallback(({ message, variant = \"info\", timeout = 3000 }) => {\r\n        const id = Date.now();\r\n        setAlerts((prev) => [...prev, { id, message, variant }]);\r\n\r\n        // Auto remove alert after timeout\r\n        setTimeout(() => {\r\n            setAlerts((prev) => prev.filter((alert) => alert.id !== id));\r\n        }, timeout);\r\n    }, []);\r\n\r\n    // Remove alert manually (optional)\r\n    const removeAlert = (id) => {\r\n        setAlerts((prev) => prev.filter((alert) => alert.id !== id));\r\n    };\r\n\r\n    return (\r\n        <AlertContext.Provider value={{ alerts, showAlert, removeAlert }}>\r\n            {children}\r\n        </AlertContext.Provider>\r\n    );\r\n};\r\n","import React from 'react';\r\nimport { Container, Nav, Navbar } from \"react-bootstrap\";\r\nimport logo from \"../assets/logo.png\";\r\nimport styles from \"../styles/NavBar.module.css\";\r\nimport { NavLink, useHistory } from \"react-router-dom\";\r\nimport { useCurrentUser, useSetCurrentUser } from '../contexts/CurrentUserContext';\r\nimport Avatar from './Avatar';\r\nimport useClickOutsideToggle from '../hooks/useClickOutsideToggle';\r\nimport { useAlert } from \"../contexts/AlertContext\";\r\n\r\n// NavBar component handles site navigation with conditional links based on auth state\r\nconst NavBar = () => {\r\n    // Get current user and setter from content\r\n    const currentUser = useCurrentUser();\r\n    const setCurrentUser = useSetCurrentUser();\r\n    const history = useHistory();\r\n    const { showAlert } = useAlert();\r\n\r\n    // Custom hook to toggle navbar menu open/close\r\n    const { expanded, setExpanded, ref } = useClickOutsideToggle();\r\n\r\n    // Sign out function clears tokens, resets user context, and redirects to sign in page\r\n    const handleSignOut = () => {\r\n        localStorage.removeItem(\"access_token\");\r\n        localStorage.removeItem(\"refresh_token\");\r\n        setCurrentUser(null);\r\n        showAlert({ message: \"Successfully signed out.\", variant: \"info\" });\r\n        history.push(\"/signin\");\r\n    };\r\n\r\n    const addPostIcon = (\r\n        <NavLink\r\n            className={styles.NavLink}\r\n            activeClassName={styles.Active}\r\n            to=\"/posts/create\"\r\n        >\r\n            <i className=\"fa-solid fa-circle-plus\"></i> New Post\r\n        </NavLink>\r\n    );\r\n\r\n    // Icons shown when user is logged in\r\n    const loggedInIcons = (\r\n        <>\r\n            <NavLink\r\n                className={styles.NavLink}\r\n                activeClassName={styles.Active}\r\n                to=\"/feed\"\r\n            >\r\n                <i className=\"fa-solid fa-walkie-talkie\"></i> Feed\r\n            </NavLink>\r\n            <NavLink\r\n                className={styles.NavLink}\r\n                activeClassName={styles.Active}\r\n                to=\"/liked\"\r\n            >\r\n                <i className=\"fa-solid fa-heart\"></i> Liked\r\n            </NavLink>\r\n            <NavLink\r\n                className={styles.NavLink}\r\n                to=\"/\"\r\n                onClick={handleSignOut}\r\n            >\r\n                <i className=\"fa-solid fa-door-open\"></i> Sign Out\r\n            </NavLink>\r\n            <NavLink\r\n                className={styles.NavLink}\r\n                to={`/users/${currentUser?.id}`}\r\n            >\r\n                <Avatar\r\n                    src={currentUser?.profile_picture || \"https://res.cloudinary.com/dumjqhvzz/image/upload/v1736331882/default_profile_snzudq.jpg\"}\r\n                    height=\"40\"\r\n                    alt=\"Profile\"\r\n                />\r\n            </NavLink>\r\n        </>\r\n    );\r\n\r\n    // Icons shown when user is logged out\r\n    const loggedOutIcons = (\r\n        <>\r\n            <NavLink\r\n                className={styles.NavLink}\r\n                activeClassName={styles.Active}\r\n                to=\"/signin\"\r\n            >\r\n                <i className=\"fas fa-sign-in-alt\"></i> Sign In\r\n            </NavLink>\r\n            <NavLink\r\n                className={styles.NavLink}\r\n                activeClassName={styles.Active}\r\n                to=\"/signup\"\r\n            >\r\n                <i className=\"fas fa-user-plus\"></i> Sign Up\r\n            </NavLink>\r\n        </>\r\n    );\r\n\r\n    // Render navbar with brand, toggle, and nav links\r\n    return (\r\n        <Navbar\r\n            expanded={expanded}\r\n            className={styles.NavBar}\r\n            expand=\"md\"\r\n            fixed=\"top\"\r\n        >\r\n            <Container className=\"d-flex justify-content-between align-items-center\">\r\n                <NavLink to=\"/\" exact>\r\n                    <Navbar.Brand className=\"mx-auto\">\r\n                        <img src={logo} alt=\"Gamebits logo\" height=\"45\" />\r\n                    </Navbar.Brand>\r\n                </NavLink>\r\n\r\n                {currentUser && addPostIcon}\r\n\r\n                <Navbar.Toggle\r\n                    ref={ref}\r\n                    onClick={() => setExpanded(!expanded)}\r\n                    aria-controls=\"basic-navbar-nav\"\r\n                />\r\n                <Navbar.Collapse id=\"basic-navbar-nav\">\r\n                    <Nav className=\"ml-auto text-left\">\r\n                        <NavLink\r\n                            exact\r\n                            className={styles.NavLink}\r\n                            activeClassName={styles.Active}\r\n                            to=\"/\"\r\n                        >\r\n                            <i className=\"fa-solid fa-house-user\"></i> Home\r\n                        </NavLink>\r\n\r\n                        {!currentUser ? loggedOutIcons : loggedInIcons}\r\n                    </Nav>\r\n                </Navbar.Collapse>\r\n            </Container>\r\n        </Navbar>\r\n    );\r\n};\r\n\r\nexport default NavBar;\r\n","export default __webpack_public_path__ + \"static/media/signup.27579a0d.jpg\";","import React, { useState } from \"react\";\r\nimport { Link, useHistory } from \"react-router-dom\";  // Updated import\r\n\r\nimport styles from \"../../styles/SignInUpForm.module.css\";\r\nimport btnStyles from \"../../styles/Button.module.css\";\r\nimport appStyles from \"../../App.module.css\";\r\n\r\nimport { Form, Button, Image, Col, Row, Container, Alert } from \"react-bootstrap\";\r\nimport axios from \"../../api/axiosDefaults\";\r\nimport { useAlert } from \"../../contexts/AlertContext\";\r\n\r\nimport signUpImage from \"../../assets/signup.jpg\";\r\n\r\n// SignUpForm handles user registration with form validation and error display.\r\n// On a successful signup, redirects to the sign-in page.\r\n\r\nconst SignUpForm = () => {\r\n    // Form state for input fields.\r\n    const [signUpData, setSignUpData] = useState({\r\n        username: \"\",\r\n        email: \"\",\r\n        password1: \"\",\r\n        password2: \"\",\r\n    });\r\n    const { username, email, password1, password2 } = signUpData;\r\n\r\n    // Stores validation or submission errors from backend\r\n    const [errors, setErrors] = useState({});\r\n    // Tracks whether form submission is in progress to disable button\r\n    const [isSubmitting, setIsSubmitting] = useState(false);\r\n\r\n    const history = useHistory();\r\n\r\n    // Access showAlert from global alert context\r\n    const { showAlert } = useAlert();\r\n\r\n    // Update form state and clear errors for the changed field\r\n    const handleChange = (event) => {\r\n        setSignUpData({\r\n            ...signUpData,\r\n            [event.target.name]: event.target.value,\r\n        });\r\n        // Clear errors for this field and non_field_errors on change\r\n        setErrors((prevErrors) => ({\r\n            ...prevErrors,\r\n            [event.target.name]: null,\r\n            non_field_errors: null,\r\n        }));\r\n    };\r\n\r\n    // Submit registration data to backend API\r\n    const handleSubmit = async (event) => {\r\n        event.preventDefault();\r\n        setIsSubmitting(true);\r\n        try {\r\n            await axios.post('users/register/', signUpData);\r\n            // Show the welcome alert right before redirect\r\n            showAlert({ message: \"Welcome to GameBits! Now, sign in!\", variant: \"success\" });\r\n            // Redirect to sign-in page on success\r\n            history.push(\"/signin\");\r\n        } catch (err) {\r\n            // Show backend validation errors if any\r\n            setErrors(err.response?.data || {});\r\n        } finally {\r\n            setIsSubmitting(false);\r\n        }\r\n    };\r\n\r\n    return (\r\n        // JSX rendering form fields, error alerts, and sign-up image\r\n        <Row className={styles.Row}>\r\n            <Col className=\"my-auto py-2 p-md-2\" md={6}>\r\n                <Container className={`${appStyles.Content} p-4 `}>\r\n                    <h1 className={styles.Header}>Sign Up</h1>\r\n\r\n                    <Form onSubmit={handleSubmit}>\r\n                        {/* Username */}\r\n                        <Form.Group controlId=\"username\">\r\n                            <Form.Label className=\"d-none\">Username</Form.Label>\r\n                            <Form.Control\r\n                                className={styles.Input}\r\n                                type=\"text\"\r\n                                placeholder=\"Username\"\r\n                                name=\"username\"\r\n                                value={username}\r\n                                onChange={handleChange}\r\n                            />\r\n                        </Form.Group>\r\n                        {errors.username?.map((message, idx) =>\r\n                            <Alert variant=\"warning\" key={idx}>{message}</Alert>\r\n                        )}\r\n\r\n                        {/* Email */}\r\n                        <Form.Group controlId=\"email\">\r\n                            <Form.Label className=\"d-none\">Email</Form.Label>\r\n                            <Form.Control\r\n                                className={styles.Input}\r\n                                type=\"email\"\r\n                                placeholder=\"Email\"\r\n                                name=\"email\"\r\n                                value={email}\r\n                                onChange={handleChange}\r\n                            />\r\n                        </Form.Group>\r\n                        {errors.email?.map((message, idx) =>\r\n                            <Alert variant=\"warning\" key={idx}>{message}</Alert>\r\n                        )}\r\n\r\n                        {/* Password */}\r\n                        <Form.Group controlId=\"password1\">\r\n                            <Form.Label className=\"d-none\">Password</Form.Label>\r\n                            <Form.Control\r\n                                className={styles.Input}\r\n                                type=\"password\"\r\n                                placeholder=\"Password\"\r\n                                name=\"password1\"\r\n                                value={password1}\r\n                                onChange={handleChange}\r\n                            />\r\n                        </Form.Group>\r\n                        {errors.password1?.map((message, idx) =>\r\n                            <Alert variant=\"warning\" key={idx}>{message}</Alert>\r\n                        )}\r\n\r\n                        {/* Confirm Password */}\r\n                        <Form.Group controlId=\"password2\">\r\n                            <Form.Label className=\"d-none\">Confirm password</Form.Label>\r\n                            <Form.Control\r\n                                className={styles.Input}\r\n                                type=\"password\"\r\n                                placeholder=\"Confirm password\"\r\n                                name=\"password2\"\r\n                                value={password2}\r\n                                onChange={handleChange}\r\n                            />\r\n                        </Form.Group>\r\n                        {errors.password2?.map((message, idx) =>\r\n                            <Alert variant=\"warning\" key={idx}>{message}</Alert>\r\n                        )}\r\n\r\n                        {/* Submit Button */}\r\n                        <Button\r\n                            className={`${btnStyles.Button} ${btnStyles.Wide} ${btnStyles.Bright}`}\r\n                            type=\"submit\"\r\n                            disabled={isSubmitting}\r\n                        >\r\n                            {isSubmitting ? \"Signing Up...\" : \"Sign up\"}\r\n                        </Button>\r\n\r\n                        {errors.non_field_errors?.map((message, idx) => (\r\n                            <Alert key={idx} variant=\"warning\" className=\"mt-3\">\r\n                                {message}\r\n                            </Alert>\r\n                        ))}\r\n                    </Form>\r\n                </Container>\r\n                <Container className={`mt-3 ${appStyles.Content}`}>\r\n                    <Link className={styles.Link} to=\"/signin\">\r\n                        Already have an account? <span>Sign in</span>\r\n                    </Link>\r\n                </Container>\r\n            </Col>\r\n            <Col\r\n                md={6}\r\n                className={`my-auto d-none d-md-block p-2 ${styles.SignUpCol}`}\r\n            >\r\n                <Image\r\n                    className={`${appStyles.FillerImage}`}\r\n                    src={signUpImage}\r\n                    alt=\"Sign Up Illustration\"\r\n                />\r\n            </Col>\r\n        </Row>\r\n    );\r\n};\r\n\r\nexport default SignUpForm;\r\n","export default __webpack_public_path__ + \"static/media/signin.248386f9.jpg\";","import React, { useState, useEffect } from \"react\";\r\nimport axios from \"../../api/axiosDefaults\";\r\nimport Form from \"react-bootstrap/Form\";\r\nimport Alert from \"react-bootstrap/Alert\";\r\nimport Button from \"react-bootstrap/Button\";\r\nimport Col from \"react-bootstrap/Col\";\r\nimport Row from \"react-bootstrap/Row\";\r\nimport Image from \"react-bootstrap/Image\";\r\nimport Container from \"react-bootstrap/Container\";\r\nimport { Link, useHistory, useLocation } from \"react-router-dom\";\r\nimport styles from \"../../styles/SignInUpForm.module.css\";\r\nimport btnStyles from \"../../styles/Button.module.css\";\r\nimport appStyles from \"../../App.module.css\";\r\nimport { useSetCurrentUser } from \"../../contexts/CurrentUserContext\";\r\nimport { useAlert } from \"../../contexts/AlertContext\";\r\n\r\nimport signInImage from \"../../assets/signin.jpg\";\r\n\r\nfunction SignInForm() {\r\n    const setCurrentUser = useSetCurrentUser();\r\n    const [signInData, setSignInData] = useState({\r\n        username: \"\",\r\n        password: \"\",\r\n    });\r\n    const { username, password } = signInData;\r\n    const [errors, setErrors] = useState({});\r\n    const [isSubmitting, setIsSubmitting] = useState(false);\r\n    const history = useHistory();\r\n    const location = useLocation();\r\n    // Get global alert show function\r\n    const { showAlert } = useAlert();\r\n\r\n    // On mount, check if redirected with a message in location.state and show alert\r\n    useEffect(() => {\r\n        if (location.state?.alert) {\r\n            showAlert(location.state.alert);\r\n            // Clear the state so alert doesn't show again on back navigation\r\n            history.replace({ ...location, state: {} });\r\n        }\r\n    }, [location, showAlert, history]);\r\n\r\n    const handleSubmit = async (event) => {\r\n        event.preventDefault();\r\n        setIsSubmitting(true); // Disable button\r\n        try {\r\n            // Send username/password to get JWT tokens\r\n            const res = await axios.post(\"token/\", signInData);\r\n            const { data } = res;\r\n\r\n            // Save tokens in localStorage for authenticated requests\r\n            localStorage.setItem('access_token', data.access);\r\n            localStorage.setItem('refresh_token', data.refresh);\r\n\r\n            // Fetch current user profile using access token\r\n            const { data: userData } = await axios.get(\"users/current/\", {\r\n                headers: {\r\n                    Authorization: `Bearer ${data.access}`,\r\n                },\r\n            });\r\n            setCurrentUser(userData);\r\n            // Show success alert after sign-in\r\n            showAlert({ message: \"Successfully signed in!\", variant: \"success\" });\r\n            // Redirect home\r\n            history.push(\"/\");\r\n        } catch (err) {\r\n            // Show error messages returned from backend\r\n            setErrors(err.response?.data || {});\r\n        } finally {\r\n            setIsSubmitting(false); // Re-enable button\r\n        }\r\n    };\r\n\r\n    const handleChange = (event) => {\r\n        setSignInData({\r\n            ...signInData,\r\n            [event.target.name]: event.target.value,\r\n        });\r\n        // Optionally clear errors for this field on change\r\n        setErrors((prevErrors) => ({\r\n            ...prevErrors,\r\n            [event.target.name]: null,\r\n            non_field_errors: null,\r\n        }));\r\n    };\r\n\r\n    return (\r\n        <Row className={styles.Row}>\r\n            <Col className=\"my-auto p-0 p-md-2\" md={6}>\r\n                <Container className={`${appStyles.Content} p-4`}>\r\n                    <h1 className={styles.Header}>Sign In</h1>\r\n                    <Form onSubmit={handleSubmit}>\r\n                        <Form.Group controlId=\"username\">\r\n                            <Form.Label className=\"d-none\">Username</Form.Label>\r\n                            <Form.Control\r\n                                type=\"text\"\r\n                                placeholder=\"Username\"\r\n                                name=\"username\"\r\n                                className={styles.Input}\r\n                                value={username}\r\n                                onChange={handleChange}\r\n                            />\r\n                        </Form.Group>\r\n                        {errors.username?.map((message, idx) => (\r\n                            <Alert key={idx} variant=\"warning\">\r\n                                {message}\r\n                            </Alert>\r\n                        ))}\r\n\r\n                        <Form.Group controlId=\"password\">\r\n                            <Form.Label className=\"d-none\">Password</Form.Label>\r\n                            <Form.Control\r\n                                type=\"password\"\r\n                                placeholder=\"Password\"\r\n                                name=\"password\"\r\n                                className={styles.Input}\r\n                                value={password}\r\n                                onChange={handleChange}\r\n                            />\r\n                        </Form.Group>\r\n                        {errors.password?.map((message, idx) => (\r\n                            <Alert key={idx} variant=\"warning\">\r\n                                {message}\r\n                            </Alert>\r\n                        ))}\r\n                        <Button\r\n                            className={`${btnStyles.Button} ${btnStyles.Wide} ${btnStyles.Bright}`}\r\n                            type=\"submit\"\r\n                            disabled={isSubmitting} // disable button while submitting\r\n                        >\r\n                            {isSubmitting ? \"Signing In...\" : \"Sign In\"}\r\n                        </Button>\r\n                        {errors.non_field_errors?.map((message, idx) => (\r\n                            <Alert key={idx} variant=\"warning\" className=\"mt-3\">\r\n                                {message}\r\n                            </Alert>\r\n                        ))}\r\n                    </Form>\r\n                </Container>\r\n                <Container className={`mt-3 ${appStyles.Content}`}>\r\n                    <Link className={styles.Link} to=\"/signup\">\r\n                        Don't have an account? <span>Sign up now!</span>\r\n                    </Link>\r\n                </Container>\r\n            </Col>\r\n            <Col\r\n                md={6}\r\n                className={`my-auto d-none d-md-block p-2 ${styles.SignInCol}`}\r\n            >\r\n                <Image\r\n                    className={`${appStyles.FillerImage}`}\r\n                    src={signInImage}\r\n                    alt=\"Sign In Illustration\"\r\n                />\r\n            </Col>\r\n        </Row>\r\n    );\r\n}\r\n\r\nexport default SignInForm;\r\n","import React from \"react\";\r\nimport { Spinner } from \"react-bootstrap\";\r\nimport styles from \"../styles/Asset.module.css\";\r\n\r\n/**\r\n * Asset component displays either:\r\n * - a loading spinner,\r\n * - an image,\r\n * - or a message,\r\n * depending on the props passed.\r\n */\r\nconst Asset = ({ spinner, src, message }) => {\r\n    return (\r\n        <div className={`${styles.Asset} p-4`}>\r\n            {/* Show spinner if spinner prop is true */}\r\n            {spinner && <Spinner animation=\"border\" />}\r\n            {/* Show message if src prop is provided */}\r\n            {src && <img src={src} alt={message} />}\r\n            {/* Show message text if provided */}\r\n            {message && <p className=\"mt-4\">{message}</p>}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Asset;","import React, { useRef, useState } from \"react\";\r\n\r\nimport Form from \"react-bootstrap/Form\";\r\nimport Button from \"react-bootstrap/Button\";\r\nimport Row from \"react-bootstrap/Row\";\r\nimport Col from \"react-bootstrap/Col\";\r\nimport Container from \"react-bootstrap/Container\";\r\nimport Alert from \"react-bootstrap/Alert\";\r\n\r\nimport Asset from \"../../components/Asset\";\r\n\r\nimport styles from \"../../styles/PostCreateEditForm.module.css\";\r\nimport appStyles from \"../../App.module.css\";\r\nimport btnStyles from \"../../styles/Button.module.css\";\r\nimport axios from \"../../api/axiosDefaults\";\r\nimport { useHistory } from \"react-router-dom\";\r\n\r\nfunction PostCreateForm() {\r\n    const [errors, setErrors] = useState({});\r\n\r\n    const [postData, setPostData] = useState({\r\n        title: \"\",\r\n        game: \"\",\r\n        content: \"\",\r\n        image: \"\",\r\n    });\r\n    const { title, game, content, image } = postData;\r\n    const MAX_FILE_SIZE = 5 * 1024 * 1024; // 5MB limit for images\r\n\r\n    const imageInput = useRef(null);\r\n    const history = useHistory();\r\n\r\n    // Handle text input changes (title, game, content)\r\n    const handleChange = (event) => {\r\n        setPostData({\r\n            ...postData,\r\n            [event.target.name]: event.target.value,\r\n        });\r\n    };\r\n\r\n    const [imagePreview, setImagePreview] = useState(null); // State for image preview\r\n\r\n    // Handle image selection\r\n    const handleChangeImage = (event) => {\r\n        if (event.target.files.length) {\r\n            const file = event.target.files[0];\r\n\r\n            if (!file.type.startsWith(\"image/\")) {\r\n                setErrors({ image: [\"Only image files are allowed.\"] });\r\n                setPostData({ ...postData, image: null });\r\n                setImagePreview(null);\r\n                imageInput.current.value = null;\r\n                return;\r\n            }\r\n\r\n            if (file.size > MAX_FILE_SIZE) {\r\n                setErrors({ image: [`Image is too large. Max size is 5MB.`] });\r\n                setPostData({ ...postData, image: null });\r\n                setImagePreview(null);\r\n                imageInput.current.value = null;\r\n                return;\r\n            }\r\n\r\n            // Clear previous image errors\r\n            setErrors((prev) => ({ ...prev, image: null }));\r\n\r\n            if (imagePreview) {\r\n                URL.revokeObjectURL(imagePreview); // Clean up previous preview URL\r\n            }\r\n\r\n            const newPreviewUrl = URL.createObjectURL(file);\r\n            setImagePreview(newPreviewUrl);\r\n            setPostData({ ...postData, image: file });\r\n        }\r\n    };\r\n\r\n    const handleSubmit = async (event) => {\r\n        event.preventDefault();\r\n        // If image error exists, prevent submit\r\n        if (errors.image) {\r\n            return;\r\n        }\r\n        const formData = new FormData();\r\n\r\n        formData.append('title', title);\r\n        formData.append('game', game);\r\n        formData.append('content', content);\r\n        formData.append('image', imageInput.current.files[0]);\r\n\r\n        try {\r\n            const { data } = await axios.post('/posts/', formData, {\r\n                headers: {\r\n                    Authorization: `Bearer ${localStorage.getItem('access_token')}`,\r\n                    'Content-Type': 'multipart/form-data',\r\n                },\r\n            });\r\n\r\n            history.push({\r\n                pathname: `/posts/${data.id}`,\r\n                state: { alertMessage: \"Post successfully created.\" },\r\n            });\r\n        } catch (err) {\r\n            if (err.response?.status !== 401) {\r\n                setErrors(err.response?.data);\r\n            }\r\n        }\r\n    };\r\n\r\n    // Render all text input fields\r\n    const textFields = (\r\n        <div className=\"text-center\">\r\n            <Form.Group>\r\n                <Form.Label>Title</Form.Label>\r\n                <Form.Control\r\n                    type=\"text\"\r\n                    name=\"title\"\r\n                    placeholder=\"Type the title of your post...\"\r\n                    value={title}\r\n                    onChange={handleChange}\r\n                />\r\n            </Form.Group>\r\n            {errors?.title?.map((message, idx) => (\r\n                <Alert variant=\"warning\" key={idx}>\r\n                    {message}\r\n                </Alert>\r\n            ))}\r\n\r\n            <Form.Group>\r\n                <Form.Label>Game</Form.Label>\r\n                <Form.Control\r\n                    type=\"text\"\r\n                    name=\"game\"\r\n                    placeholder=\"Type the name of the game...\"\r\n                    value={game}\r\n                    onChange={handleChange}\r\n                />\r\n            </Form.Group>\r\n            {errors?.game?.map((message, idx) => (\r\n                <Alert variant=\"warning\" key={idx}>\r\n                    {message}\r\n                </Alert>\r\n            ))}\r\n            <Form.Group>\r\n                <Form.Label>Content</Form.Label>\r\n                <Form.Control\r\n                    as=\"textarea\"\r\n                    rows={6}\r\n                    name=\"content\"\r\n                    placeholder=\"Share the story behind your post...\"\r\n                    value={content}\r\n                    onChange={handleChange}\r\n                />\r\n            </Form.Group>\r\n            {errors?.content?.map((message, idx) => (\r\n                <Alert variant=\"warning\" key={idx}>\r\n                    {message}\r\n                </Alert>\r\n            ))}\r\n\r\n            <Button\r\n                className={`${btnStyles.Button} ${btnStyles.Blue}`}\r\n                onClick={() => history.goBack()}\r\n            >\r\n                cancel\r\n            </Button>\r\n            <Button\r\n                className={`${btnStyles.Button} ${btnStyles.Blue}`} type=\"submit\">\r\n                create\r\n            </Button>\r\n        </div>\r\n    );\r\n\r\n    return (\r\n        <Form onSubmit={handleSubmit}>\r\n            <Row>\r\n                <Col className=\"py-2 p-0 p-md-2\" md={7} lg={8}>\r\n                    <Container\r\n                        className={`${appStyles.Content} ${styles.Container} d-flex flex-column justify-content-center`}\r\n                    >\r\n                        <Form.Group className=\"text-center\">\r\n                            {imagePreview ? (\r\n                                // If image exists, show the preview using Asset\r\n                                <img\r\n                                    src={imagePreview}\r\n                                    alt=\"\"\r\n                                    className=\"img-fluid mb-3\"\r\n                                    style={{ maxHeight: '200px', objectFit: 'cover' }}\r\n                                />\r\n                            ) : (\r\n                                // If no image, show upload icon + message via Asset\r\n                                <Asset\r\n                                    message=\"Click or tap to upload an image\"\r\n                                    spinner={false}\r\n                                    src={null}\r\n                                />\r\n                            )}\r\n\r\n                            {/* Upload Button (appears even if image is shown) */}\r\n                            <Form.Label\r\n                                className={`${btnStyles.uploadButton} ${btnStyles.Blue} btn mt-3`}\r\n                                htmlFor=\"image-upload\"\r\n                            >\r\n                                {image ? \"Change the image\" : (\r\n                                    <div className=\"d-flex flex-column align-items-center\">\r\n                                        <i className=\"fa-solid fa-upload fa-3x mb-2\"></i>\r\n                                        Upload an image\r\n                                    </div>\r\n                                )}\r\n                            </Form.Label>\r\n\r\n                            {/* Hidden file input */}\r\n                            <Form.Control\r\n                                id=\"image-upload\"\r\n                                type=\"file\"\r\n                                accept=\"image/*\"\r\n                                onChange={handleChangeImage}\r\n                                ref={imageInput}\r\n                                className=\"d-none\"\r\n                            />\r\n                        </Form.Group>\r\n                        {errors?.image?.map((message, idx) => (\r\n                            <Alert variant=\"warning\" key={idx}>\r\n                                {message}\r\n                            </Alert>\r\n                        ))}\r\n                        <div className=\"d-md-none\">{textFields}</div>\r\n                    </Container>\r\n                </Col>\r\n                <Col md={5} lg={4} className=\"d-none d-md-block p-0 p-md-2\">\r\n                    <Container className={appStyles.Content}>{textFields}</Container>\r\n                </Col>\r\n            </Row>\r\n        </Form>\r\n    );\r\n}\r\n\r\nexport default PostCreateForm;","import React from \"react\";\r\nimport Dropdown from \"react-bootstrap/Dropdown\";\r\nimport styles from \"../styles/MoreDropdown.module.css\";\r\nimport { useHistory } from \"react-router\";\r\n\r\n// The forwardRef is important!!\r\n// Dropdown needs access to the DOM node in order to position the Menu\r\n// Custom toggle for dropdown\r\nconst ThreeDots = React.forwardRef(({ onClick, className }, ref) => (\r\n    <i\r\n        className={`fas fa-ellipsis-v ${className}`}\r\n        ref={ref}\r\n        onClick={(e) => {\r\n            e.preventDefault();\r\n            onClick(e);\r\n        }}\r\n    />\r\n));\r\n\r\nexport const MoreDropdown = ({ handleEdit, handleDelete }) => {\r\n    return (\r\n        <Dropdown className=\"ml-auto\" drop=\"left\">\r\n            <Dropdown.Toggle className={styles.DropdownToggle} />\r\n\r\n            <Dropdown.Menu\r\n                className={`${styles.DropdownMenu} text-center`}\r\n                popperConfig={{ strategy: \"fixed\" }}\r\n            >\r\n                <Dropdown.Item\r\n                    className={styles.DropdownItem}\r\n                    onClick={handleEdit}\r\n                    aria-label=\"edit\"\r\n                >\r\n                    <i className=\"fas fa-edit\" /> Edit\r\n                </Dropdown.Item>\r\n                <Dropdown.Item\r\n                    className={styles.DropdownItem}\r\n                    onClick={handleDelete}\r\n                    aria-label=\"delete\"\r\n                >\r\n                    <i className=\"fas fa-trash-alt\" /> Delete\r\n                </Dropdown.Item>\r\n            </Dropdown.Menu>\r\n        </Dropdown>\r\n    );\r\n};\r\n\r\nexport const UserEditDropdown = ({ id }) => {\r\n    const history = useHistory();\r\n    return (\r\n        <Dropdown className={`ml-auto px-3 ${styles.Absolute}`} drop=\"left\">\r\n            <Dropdown.Toggle className={styles.DropdownToggle} as={ThreeDots} />\r\n            <Dropdown.Menu className={styles.DropdownMenu}>\r\n                <Dropdown.Item\r\n                    as=\"button\"\r\n                    onClick={(e) => {\r\n                        e.preventDefault();\r\n                        history.push(`/users/${id}/edit`);\r\n                    }}\r\n                    aria-label=\"edit-profile\"\r\n                    className={styles.DropdownItem}\r\n                >\r\n                    <i className=\"fas fa-edit\" /> Edit User\r\n                </Dropdown.Item>\r\n                <Dropdown.Item\r\n                    as=\"button\"\r\n                    onClick={(e) => {\r\n                        e.preventDefault();\r\n                        history.push(`/users/${id}/edit/username`);\r\n                    }}\r\n                    aria-label=\"edit-username\"\r\n                    className={styles.DropdownItem}\r\n                >\r\n                    <i className=\"far fa-id-card\" />\r\n                    Change Username\r\n                </Dropdown.Item>\r\n                <Dropdown.Item\r\n                    as=\"button\"\r\n                    onClick={(e) => {\r\n                        e.preventDefault();\r\n                        history.push(`/users/${id}/edit/password`);\r\n                    }}\r\n                    aria-label=\"edit-password\"\r\n                    className={styles.DropdownItem}\r\n                >\r\n                    <i className=\"fas fa-key\" />\r\n                    Change Password\r\n                </Dropdown.Item>\r\n            </Dropdown.Menu>\r\n        </Dropdown>\r\n    );\r\n};\r\n","import React, { useState } from \"react\";\r\nimport styles from \"../../styles/Post.module.css\";\r\nimport { useCurrentUser } from \"../../contexts/CurrentUserContext\";\r\nimport { Card, Media, OverlayTrigger, Tooltip } from \"react-bootstrap\";\r\nimport { Link, useHistory } from \"react-router-dom\";\r\nimport Avatar from \"../../components/Avatar\";\r\nimport axios from \"../../api/axiosDefaults\";\r\nimport { MoreDropdown } from \"../../components/MoreDropdown\";\r\nimport { useAlert } from \"../../contexts/AlertContext\";\r\n\r\nconst Post = (props) => {\r\n    // Destructure props received from parent component\r\n    const {\r\n        id, author, author_id, profile_picture, title, game,\r\n        content, image, updated_at, likes_count, has_liked,\r\n        comments_count, postPage, setPost\r\n    } = props;\r\n\r\n    const currentUser = useCurrentUser();\r\n    const is_author = currentUser?.username === author;\r\n    const { showAlert } = useAlert();\r\n    const history = useHistory();\r\n\r\n    // Local state for optimistic like handling\r\n    const [localLikesCount, setLocalLikesCount] = useState(likes_count);\r\n    const [localHasLiked, setLocalHasLiked] = useState(has_liked);\r\n    const [loading, setLoading] = useState(false); // Disable spamming like button while request pending\r\n\r\n    const handleEdit = () => {\r\n        history.push(`/posts/${id}/edit`);\r\n    };\r\n\r\n    const handleDelete = async () => {\r\n        try {\r\n            await axios.delete(`/posts/${id}/`);\r\n            showAlert({ message: \"Post successfully delete!\", variant: \"success\" });\r\n            history.push(\"/\");\r\n        } catch (err) {\r\n            console.error(\"Error deleting post:\", err);\r\n        }\r\n    };\r\n\r\n    const handleLike = async () => {\r\n        if (loading) return; // Prevent multiple requests\r\n        setLoading(true);\r\n        try {\r\n            const { data } = await axios.post(`/likes/posts/${id}/like/`);\r\n\r\n            // If parent passed a setPost updater, sync parent state too\r\n            if (setPost) {\r\n                if (postPage) {\r\n                    setPost((prevPost) => ({\r\n                        ...prevPost,\r\n                        likes_count: data.likes_count,\r\n                        has_liked: data.has_liked,\r\n                    }));\r\n                } else {\r\n                    setPost((prevPosts) => ({\r\n                        ...prevPosts,\r\n                        results: prevPosts.results.map((post) =>\r\n                            post.id === id\r\n                                ? { ...post, likes_count: data.likes_count, has_liked: data.has_liked }\r\n                                : post\r\n                        ),\r\n                    }));\r\n                }\r\n            }\r\n\r\n            // Optimistically update local state\r\n            setLocalLikesCount(data.likes_count);\r\n            setLocalHasLiked(data.has_liked);\r\n        } catch (err) {\r\n            console.error(\"Error liking post:\", err);\r\n        } finally {\r\n            setLoading(false);\r\n        }\r\n    };\r\n\r\n    return (\r\n        <Card className={styles.Post}>\r\n            <Card.Body>\r\n                <Media className=\"align-items-center justify-content-between\">\r\n                    <Link to={`/users/${author_id}`}>\r\n                        <Avatar\r\n                            src={profile_picture || \"https://res.cloudinary.com/dumjqhvzz/image/upload/v1736331882/default_profile_snzudq.jpg\"}\r\n                            height=\"40\"\r\n                            alt=\"Profile\"\r\n                        />\r\n                        {author}\r\n                    </Link>\r\n\r\n                    <div className=\"d-flex align-items-center\">\r\n                        <span>\r\n                            {new Date(updated_at).toLocaleString(undefined, {\r\n                                year: \"numeric\",\r\n                                month: \"short\",\r\n                                day: \"numeric\",\r\n                                hour: \"2-digit\",\r\n                                minute: \"2-digit\",\r\n                            })}\r\n                        </span>\r\n                        {is_author && postPage && (\r\n                            <MoreDropdown handleEdit={handleEdit} handleDelete={handleDelete} />\r\n                        )}\r\n                    </div>\r\n                </Media>\r\n            </Card.Body>\r\n\r\n            <Link to={`/posts/${id}`}>\r\n                <Card.Img src={image} alt={title} />\r\n            </Link>\r\n\r\n            <Card.Body>\r\n                {title && <Card.Title className=\"text-center\">{title}</Card.Title>}\r\n                {game && <Card.Text>{game}</Card.Text>}\r\n                {content && <Card.Text>{content}</Card.Text>}\r\n\r\n                <div className={styles.PostBar}>\r\n                    {/* Like button logic */}\r\n                    {is_author ? (\r\n                        <OverlayTrigger placement=\"top\" overlay={<Tooltip>You can't like your own post!</Tooltip>}>\r\n                            <i className=\"far fa-heart\" />\r\n                        </OverlayTrigger>\r\n                    ) : currentUser ? (\r\n                        <>\r\n                            <span onClick={handleLike} style={{ pointerEvents: loading ? \"none\" : \"auto\" }}>\r\n                                <i\r\n                                    className={\r\n                                        localHasLiked\r\n                                            ? `fas fa-heart ${styles.Heart}`\r\n                                            : `far fa-heart ${styles.HeartOutline}`\r\n                                    }\r\n                                />\r\n                            </span>\r\n                            <span>{localLikesCount}</span>\r\n                        </>\r\n                    ) : (\r\n                        <OverlayTrigger placement=\"top\" overlay={<Tooltip>Log in to like posts!</Tooltip>}>\r\n                            <i className=\"far fa-heart\" />\r\n                        </OverlayTrigger>\r\n                    )}\r\n\r\n                    <Link to={`/posts/${id}`}>\r\n                        <i className=\"far fa-comments\" />\r\n                    </Link>\r\n                    {comments_count}\r\n                </div>\r\n            </Card.Body>\r\n        </Card>\r\n    );\r\n};\r\n\r\nexport default Post;\r\n","import React, { useState } from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nimport Form from \"react-bootstrap/Form\";\r\nimport InputGroup from \"react-bootstrap/InputGroup\";\r\nimport { useCurrentUser } from \"../../contexts/CurrentUserContext\";\r\n\r\nimport styles from \"../../styles/CommentCreateEditForm.module.css\";\r\nimport Avatar from \"../../components/Avatar\";\r\nimport axios from \"../../api/axiosDefaults\";\r\n\r\nfunction CommentCreateForm(props) {\r\n    // State to track comment content input by the user\r\n    const [content, setContent] = useState(\"\");\r\n    const { post, setPost, setComments, profilePicture } = props || {};\r\n    // Tracks whether form submission is in progress to disable input/button\r\n    const [isSubmitting, setIsSubmitting] = useState(false);\r\n    // Holds any error message from submission failure\r\n    const [error, setError] = useState(null);\r\n    const currentUser = useCurrentUser();\r\n\r\n    // Update content state as user types; clear error if any\r\n    const handleChange = (event) => {\r\n        setContent(event.target.value);\r\n        if (error) setError(null);\r\n    };\r\n\r\n    // Handles form submission to create a new comment via API\r\n    const handleSubmit = async (event) => {\r\n        event.preventDefault();\r\n\r\n        if (!content.trim()) return; // Prevent submitting empty comments\r\n\r\n        setIsSubmitting(true);\r\n        setError(null);\r\n\r\n        try {\r\n            // Post comment to backend API\r\n            const { data } = await axios.post(\"/comments/\", {\r\n                content,\r\n                post,\r\n            });\r\n\r\n            // Prepend the new comment to the existing comments list\r\n            setComments((prevComments) => ({\r\n                ...prevComments,\r\n                results: [data, ...prevComments.results],\r\n            }));\r\n\r\n            // Increment the comments count on the parent post\r\n            setPost((prevPost) => ({\r\n                ...prevPost,\r\n                comments_count: prevPost.comments_count + 1,\r\n            }));\r\n\r\n            // Clear the textarea input after successful submission\r\n            setContent(\"\");\r\n        } catch (err) {\r\n            console.error(err);\r\n            setError(\"Failed to post comment. Please try again.\");\r\n        } finally {\r\n            setIsSubmitting(false);\r\n        }\r\n    };\r\n\r\n    return (\r\n        <Form className=\"mt-2\" onSubmit={handleSubmit}>\r\n            <Form.Group>\r\n                <InputGroup>\r\n                    {/* Link to current user's profile with avatar */}\r\n                    <Link to={`/users/${currentUser?.id}`}>\r\n                        <Avatar src={profilePicture} />\r\n                    </Link>\r\n                    {/* Textarea input for new comment */}\r\n                    <Form.Control\r\n                        className={styles.Form}\r\n                        placeholder=\"my comment...\"\r\n                        as=\"textarea\"\r\n                        value={content}\r\n                        onChange={handleChange}\r\n                        rows={2}\r\n                        aria-label=\"Write a comment\"\r\n                        disabled={isSubmitting}\r\n                    />\r\n                </InputGroup>\r\n            </Form.Group>\r\n\r\n            {/* Show error message if submission failed */}\r\n            {error && <div role=\"alert\" className=\"text-danger mb-2\">{error}</div>}\r\n\r\n            {/* Submit button disabled if no input or submitting */}\r\n            <button\r\n                className={`${styles.Button} btn d-block ml-auto`}\r\n                disabled={!content.trim() || isSubmitting}\r\n                type=\"submit\"\r\n            >\r\n                {isSubmitting ? \"Posting...\" : \"post\"}\r\n            </button>\r\n        </Form>\r\n    );\r\n}\r\n\r\nexport default CommentCreateForm;\r\n","import React, { useState } from \"react\";\r\nimport Form from \"react-bootstrap/Form\";\r\nimport axios from \"../../api/axiosDefaults\";\r\n\r\nimport styles from \"../../styles/CommentCreateEditForm.module.css\";\r\n\r\nfunction CommentEditForm({ id, content, setShowEditForm, setComments, className }) {\r\n    // Local state to track updated comment content\r\n    const [formContent, setFormContent] = useState(content);\r\n    // Track submitting state to prevent multiple requests\r\n    const [isSubmitting, setIsSubmitting] = useState(false);\r\n    // Track potential error state\r\n    const [error, setError] = useState(null);\r\n\r\n    // Handle textarea changes\r\n    const handleChange = (event) => {\r\n        setFormContent(event.target.value);\r\n        if (error) setError(null);\r\n    };\r\n\r\n    // Handle form submission to update comment via API\r\n    const handleSubmit = async (event) => {\r\n        event.preventDefault();\r\n\r\n        const trimmedContent = formContent.trim();\r\n        if (!trimmedContent) return; // Prevent submitting empty content\r\n\r\n        setIsSubmitting(true);\r\n        setError(null);\r\n\r\n        try {\r\n            await axios.put(`/comments/${id}/`, { content: trimmedContent });\r\n\r\n            // Update local state to reflect edited comment immediately\r\n            setComments((prevComments) => ({\r\n                ...prevComments,\r\n                results: prevComments.results.map((comment) =>\r\n                    comment.id === id\r\n                        ? { ...comment, content: trimmedContent, updated_at: \"now\" }\r\n                        : comment\r\n                ),\r\n            }));\r\n\r\n            setShowEditForm(false);\r\n        } catch (err) {\r\n            console.error(err);\r\n            setError(\"Failed to update comment. Please try again.\");\r\n        } finally {\r\n            setIsSubmitting(false);\r\n        }\r\n    };\r\n\r\n    return (\r\n        <Form onSubmit={handleSubmit} className={className}>\r\n            <Form.Group className=\"pr-1\">\r\n                <Form.Control\r\n                    className={styles.Form}\r\n                    as=\"textarea\"\r\n                    value={formContent}\r\n                    onChange={handleChange}\r\n                    rows={2}\r\n                    aria-label=\"Edit comment\"\r\n                    disabled={isSubmitting}\r\n                />\r\n            </Form.Group>\r\n\r\n            {/* Display error message if any */}\r\n            {error && <div role=\"alert\" className=\"text-danger mb-2\">{error}</div>}\r\n\r\n            <div className=\"text-right\">\r\n                <button\r\n                    className={styles.Button}\r\n                    onClick={() => setShowEditForm(false)}\r\n                    type=\"button\"\r\n                    disabled={isSubmitting}\r\n                >\r\n                    cancel\r\n                </button>\r\n                <button\r\n                    className={styles.Button}\r\n                    disabled={!formContent.trim() || isSubmitting}\r\n                    type=\"submit\"\r\n                >\r\n                    {isSubmitting ? \"Saving...\" : \"save\"}\r\n                </button>\r\n            </div>\r\n        </Form>\r\n    );\r\n}\r\n\r\nexport default CommentEditForm;\r\n","import React, { useState } from \"react\";\r\nimport { Media } from \"react-bootstrap\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nimport Avatar from \"../../components/Avatar\";\r\nimport { useCurrentUser } from \"../../contexts/CurrentUserContext\";\r\nimport { MoreDropdown } from \"../../components/MoreDropdown\";\r\nimport axios from \"../../api/axiosDefaults\";\r\nimport CommentEditForm from \"./CommentEditForm\";\r\n\r\nimport styles from \"../../styles/Comment.module.css\";\r\nimport dropdownStyles from \"../../styles/MoreDropdown.module.css\";\r\nimport { useAlert } from \"../../contexts/AlertContext\";\r\n\r\nconst Comment = (props) => {\r\n    const {\r\n        author_id,\r\n        profile_picture,\r\n        author,\r\n        updated_at,\r\n        content,\r\n        id,\r\n        setPost,\r\n        setComments,\r\n        postId,\r\n    } = props;\r\n\r\n    // Controls whether the edit form is shown or not\r\n    const [showEditForm, setShowEditForm] = useState(false);\r\n\r\n    // Get current logged-in user to check permissions\r\n    const currentUser = useCurrentUser();\r\n    // Determine if the current user is the author of this comment\r\n    const is_author = currentUser?.username === author;\r\n\r\n    // Fallback profile picture URL if none provided\r\n    const defaultProfilePic = \"https://res.cloudinary.com/dumjqhvzz/image/upload/v1736331882/default_profile_snzudq.jpg\";\r\n\r\n    // Get global alert functions from context\r\n    const { showAlert } = useAlert();\r\n\r\n    // Handler to delete the comment and update parent states accordingly\r\n    const handleDelete = async () => {\r\n        try {\r\n            await axios.delete(`/comments/${id}`);\r\n\r\n            // Update the parent post's comments count safely, handling single post or paginated results\r\n            setPost(prevPost => {\r\n                if (!prevPost) return prevPost;\r\n\r\n                if (prevPost.hasOwnProperty(\"results\")) {\r\n                    // If paginated list of posts, update the matching post's comments_count\r\n                    return {\r\n                        ...prevPost,\r\n                        results: prevPost.results.map(post =>\r\n                            post.id === postId\r\n                                ? {\r\n                                    ...post,\r\n                                    comments_count: Math.max(0, post.comments_count - 1),\r\n                                }\r\n                                : post\r\n                        ),\r\n                    };\r\n                }\r\n                // Single post object case\r\n                if (prevPost.id === postId) {\r\n                    return {\r\n                        ...prevPost,\r\n                        comments_count: Math.max(0, prevPost.comments_count - 1),\r\n                    };\r\n                }\r\n                return prevPost;\r\n            });\r\n\r\n            // Remove the deleted comment from the comments list\r\n            setComments((prevComments) => ({\r\n                ...prevComments,\r\n                results: prevComments.results.filter(comment => comment.id !== id),\r\n            }));\r\n\r\n            // Show success alert globally\r\n            showAlert({ message: \"Comment deleted successfully!\", variant: \"success\" });\r\n\r\n        } catch (err) {\r\n            console.error(\"Error deleting comment:\", err);\r\n\r\n            // Show error alert globally\r\n            showAlert({ message: \"Failed to delete comment. Please try again.\", variant: \"danger\" });\r\n        }\r\n    };\r\n\r\n    return (\r\n        <>\r\n            <hr />\r\n            <Media>\r\n                {/* Link to author's profile */}\r\n                <Link to={`/users/${author_id}`}>\r\n                    <Avatar src={profile_picture || defaultProfilePic} />\r\n                </Link>\r\n\r\n                <Media.Body className=\"align-self-center ml-2\">\r\n                    <span className={styles.Author}>{author}</span>\r\n                    <span className={styles.Date}>{updated_at}</span>\r\n\r\n                    {/* Toggle between edit form and comment content display */}\r\n                    {showEditForm ? (\r\n                        <div className={dropdownStyles.DropdownMenu}>\r\n                            <CommentEditForm\r\n                                id={id}\r\n                                author_id={author_id}\r\n                                content={content}\r\n                                profile_picture={profile_picture}\r\n                                setComments={setComments}\r\n                                setShowEditForm={setShowEditForm}\r\n                            />\r\n                        </div>\r\n                    ) : (\r\n                        <p>{content}</p>\r\n                    )}\r\n                </Media.Body>\r\n\r\n                {/* Show edit/delete dropdown only to the comment author when not editing */}\r\n                {is_author && !showEditForm && (\r\n                    <div className=\"ml-auto\">\r\n                        <MoreDropdown\r\n                            handleEdit={() => setShowEditForm(true)}\r\n                            handleDelete={handleDelete}\r\n                        />\r\n                    </div>\r\n                )}\r\n            </Media>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default Comment;\r\n","import { createContext, useContext, useEffect, useState } from \"react\";\r\nimport axios from \"../api/axiosDefaults\";\r\nimport { useCurrentUser, useSetCurrentUser } from \"../contexts/CurrentUserContext\";\r\n\r\n// Contexts for user data and setter\r\nconst UserDataContext = createContext();\r\nconst SetUserDataContext = createContext();\r\n\r\n// Custom hooks for consuming contexts\r\nexport const useUserData = () => useContext(UserDataContext);\r\nexport const useSetUserData = () => useContext(SetUserDataContext);\r\n\r\nexport const UserDataProvider = ({ children }) => {\r\n    // Holds user data like popular users and the user shown on a page\r\n    const [userData, setUserData] = useState({\r\n        popularUsers: { results: [] },\r\n        pageUser: { results: [] },\r\n    });\r\n\r\n    const currentUser = useCurrentUser();\r\n    const setCurrentUser = useSetCurrentUser();\r\n\r\n    // Fetch popular users whenever currentUser changes (login/logout)\r\n    useEffect(() => {\r\n        const fetchPopularUsers = async () => {\r\n            try {\r\n                const { data } = await axios.get(\"/users/?ordering=-level\");\r\n                setUserData((prevState) => ({\r\n                    ...prevState,\r\n                    popularUsers: data,\r\n                }));\r\n            } catch (err) {\r\n                console.error(\"Error fetching popular users:\", err);\r\n            }\r\n        };\r\n\r\n        fetchPopularUsers();\r\n    }, [currentUser]);\r\n\r\n    // Toggle follow/unfollow for a user by ID\r\n    const handleFollowToggle = async (userId) => {\r\n        try {\r\n            // Backend toggles follow state and returns updated info\r\n            const { data } = await axios.post(`follow/toggle/${userId}/`);\r\n\r\n            // Update popularUsers and pageUser in state accordingly\r\n            setUserData((prev) => {\r\n                const updatedPopularUsers = prev.popularUsers.results.map((user) =>\r\n                    user.id === userId\r\n                        ? {\r\n                            ...user,\r\n                            following_id: data.following_id,\r\n                            followers: data.followers_count,\r\n                        }\r\n                        : user\r\n                );\r\n\r\n                const updatedPageUser = prev.pageUser.results.map((user) =>\r\n                    user.id === userId\r\n                        ? {\r\n                            ...user,\r\n                            following_id: data.following_id,\r\n                            followers: data.followers_count,\r\n                        }\r\n                        : user\r\n                );\r\n\r\n                return {\r\n                    ...prev,\r\n                    popularUsers: {\r\n                        ...prev.popularUsers,\r\n                        results: updatedPopularUsers,\r\n                    },\r\n                    pageUser: {\r\n                        ...prev.pageUser,\r\n                        results: updatedPageUser,\r\n                    },\r\n                };\r\n            });\r\n\r\n            // Also update currentUser's following count locally\r\n            setCurrentUser(prev => prev && {\r\n                ...prev,\r\n                following: data.is_following\r\n                    ? prev.following + 1  // Just followed someone\r\n                    : prev.following - 1  // Just unfollowed someone\r\n            });\r\n\r\n            return data.message;\r\n        } catch (err) {\r\n            console.error(\"Error toggling follow:\", err);\r\n        }\r\n    };\r\n\r\n    return (\r\n        <UserDataContext.Provider\r\n            value={{\r\n                pageUser: userData.pageUser,\r\n                popularUsers: userData.popularUsers,\r\n                handleFollowToggle,\r\n            }}\r\n        >\r\n            <SetUserDataContext.Provider value={setUserData}>\r\n                {children}\r\n            </SetUserDataContext.Provider>\r\n        </UserDataContext.Provider>\r\n    );\r\n};\r\n","import React, { useState } from \"react\";\r\nimport styles from \"../../styles/User.module.css\";\r\nimport btnStyles from \"../../styles/Button.module.css\";\r\nimport { useCurrentUser } from \"../../contexts/CurrentUserContext\";\r\nimport { Link } from \"react-router-dom\";\r\nimport Avatar from \"../../components/Avatar\";\r\nimport { Button } from \"react-bootstrap\";\r\n\r\nconst User = (props) => {\r\n    const { user, mobile, imageSize = 55, handleFollowToggle } = props;\r\n    const { id, following_id, profile_picture } = user || {};\r\n\r\n    const currentUser = useCurrentUser();\r\n    const [loading, setLoading] = useState(false);\r\n\r\n    // Handler to toggle follow/unfollow state with loading prevention\r\n    const onToggleClick = async () => {\r\n        if (!handleFollowToggle || loading) return;\r\n        setLoading(true);\r\n        await handleFollowToggle(id);\r\n        setLoading(false);\r\n    };\r\n\r\n    // Determine if the follow button should be shown:\r\n    // Only show if logged in, not current user's own profile\r\n    const showFollowButton =\r\n        currentUser && user.username !== currentUser.username;\r\n\r\n    return (\r\n        <div\r\n            className={`my-3 d-flex align-items-center ${mobile ? \"flex-column text-center\" : \"\"\r\n                }`}\r\n        >\r\n            {/* User avatar linking to their profile */}\r\n            <div>\r\n                <Link className=\"align-self-center\" to={`/users/${id}`}>\r\n                    <Avatar\r\n                        src={\r\n                            profile_picture ||\r\n                            \"https://res.cloudinary.com/dumjqhvzz/image/upload/v1736331882/default_profile_snzudq.jpg\"\r\n                        }\r\n                        height={imageSize}\r\n                        alt={`${user.username}'s profile picture`}\r\n                    />\r\n                </Link>\r\n            </div>\r\n\r\n            {/* Username with word-break for long names */}\r\n            <div className={`mx-2 ${styles.WordBreak}`}>\r\n                <strong>{user.username}</strong>\r\n            </div>\r\n\r\n            {/* Follow/Unfollow Button */}\r\n            <div\r\n                className={`${mobile ? \"w-100 mt-2\" : \"text-right ml-auto\"\r\n                    }`}\r\n            >\r\n                {showFollowButton && (\r\n                    <Button\r\n                        className={`${btnStyles.Button} ${following_id ? btnStyles.BlackOutline : btnStyles.Blue\r\n                            } ${mobile ? \"w-100\" : \"\"}`}\r\n                        onClick={onToggleClick}\r\n                        disabled={loading}\r\n                        size={mobile ? \"lg\" : \"sm\"} // bigger tap target on mobile\r\n                    >\r\n                        {loading\r\n                            ? following_id\r\n                                ? \"Unfollowing...\"\r\n                                : \"Following...\"\r\n                            : following_id\r\n                                ? \"Unfollow\"\r\n                                : \"Follow\"}\r\n                    </Button>\r\n                )}\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default User;\r\n","import React from \"react\";\r\nimport { Container } from \"react-bootstrap\";\r\nimport appStyles from \"../../App.module.css\";\r\nimport Asset from \"../../components/Asset\";\r\nimport { useUserData } from \"../../contexts/UserDataContext\";\r\nimport User from \"./User\";\r\n\r\nconst PopularUsers = ({ mobile }) => {\r\n  const { popularUsers, handleFollowToggle } = useUserData();\r\n\r\n  // Defensive null check on popularUsers\r\n  const hasUsers = popularUsers?.results?.length > 0;\r\n\r\n  return (\r\n    <Container\r\n      className={`${appStyles.Content} ${mobile ? \"d-lg-none text-center mb-3\" : \"\"}`}\r\n    >\r\n      {hasUsers ? (\r\n        <>\r\n          <p>Popular Users</p>\r\n\r\n          {mobile ? (\r\n            // Render first 4 users for mobile\r\n            <div className=\"d-flex justify-content-around\">\r\n              {popularUsers.results.slice(0, 4).map((user) => (\r\n                <User\r\n                  key={user.id}\r\n                  user={user}\r\n                  mobile\r\n                  handleFollowToggle={handleFollowToggle}\r\n                />\r\n              ))}\r\n            </div>\r\n          ) : (\r\n            // Render full list for desktop\r\n            popularUsers.results.map((user) => (\r\n              <User\r\n                key={user.id}\r\n                user={user}\r\n                handleFollowToggle={handleFollowToggle}\r\n              />\r\n            ))\r\n          )}\r\n        </>\r\n      ) : (\r\n        // Graceful fallback depending on whether data is empty or still loading\r\n        <Asset message=\"No popular users yet.\" spinner={!popularUsers?.results} />\r\n      )}\r\n    </Container>\r\n  );\r\n};\r\n\r\nexport default PopularUsers;\r\n","import axios from \"../api/axiosDefaults\";\r\n\r\n/**\r\n * Fetches the next page of data from a paginated resource and appends\r\n * new unique results to the existing resource state.\r\n *\r\n * @param {object} resource - The current paginated resource object\r\n *   Expected shape: { next: string|null, results: Array }\r\n * @param {function} setResource - State setter function to update the resource\r\n */\r\nexport const fetchMoreData = async (resource, setResource) => {\r\n    // If there is no next page, no need to fetch\r\n    if (!resource.next) {\r\n        return;\r\n    }\r\n\r\n    try {\r\n        const { data } = await axios.get(resource.next);\r\n        setResource((prevResource) => ({\r\n            ...prevResource,\r\n            next: data.next,\r\n            results: data.results.reduce((acc, cur) => {\r\n                // Avoid duplicate items by checking existing IDs\r\n                return acc.some((accResult) => accResult.id === cur.id)\r\n                    ? acc\r\n                    : [...acc, cur];\r\n            }, prevResource.results),\r\n        }));\r\n    } catch (err) {\r\n        // Log error for debugging; optionally handle it further or pass up\r\n        console.error(\"Error fetching more data:\", err);\r\n    }\r\n};\r\n","import React, { useEffect, useState } from \"react\";\r\n\r\nimport Col from \"react-bootstrap/Col\";\r\nimport Row from \"react-bootstrap/Row\";\r\nimport Container from \"react-bootstrap/Container\";\r\n\r\nimport appStyles from \"../../App.module.css\";\r\nimport { useParams, Redirect, useLocation } from \"react-router-dom\";\r\nimport Post from \"./Post\";\r\n\r\nimport CommentCreateForm from \"../comments/CommentCreateForm\";\r\nimport { useCurrentUser } from \"../../contexts/CurrentUserContext\";\r\nimport Comment from \"../comments/Comment\";\r\nimport PopularUsers from \"../users/PopularUsers\";\r\n\r\nimport InfiniteScroll from \"react-infinite-scroll-component\";\r\nimport Asset from \"../../components/Asset\";\r\nimport axios from \"../../api/axiosDefaults\";\r\nimport { fetchMoreData } from \"../../utils/utils\";\r\nimport { useAlert } from \"../../contexts/AlertContext\";\r\n\r\nfunction PostPage() {\r\n  // Get post ID from URL params\r\n  const { id } = useParams();\r\n  // State for post and comments\r\n  const [post, setPost] = useState(null);\r\n  const [comments, setComments] = useState({ results: [], next: null });\r\n  const [error, setError] = useState(null);\r\n\r\n  const location = useLocation();\r\n  const alertMessage = location.state?.alertMessage;\r\n  const { showAlert } = useAlert();\r\n\r\n  // Get current user from context\r\n  const currentUser = useCurrentUser();\r\n  // Fallback profile picture in case none exists\r\n  const profile_picture = currentUser?.profile_picture ||\r\n    \"https://res.cloudinary.com/dumjqhvzz/image/upload/v1736331882/default_profile_snzudq.jpg\";\r\n\r\n  // Show alert on mount if it exists\r\n  useEffect(() => {\r\n    if (alertMessage) {\r\n      showAlert({ message: alertMessage, variant: \"success\" });\r\n    }\r\n  }, [alertMessage, showAlert]);\r\n\r\n  // Fetch post and comments on component mount or when ID changes\r\n  useEffect(() => {\r\n    let isMounted = true;\r\n    const handleMount = async () => {\r\n      try {\r\n        // Fetch post data and its comments in parallel\r\n        const [{ data: postData }, { data: commentsData }] = await Promise.all([\r\n          axios.get(`/posts/${id}`),\r\n          axios.get(`/comments/?post=${id}`),\r\n        ]);\r\n        if (isMounted) {\r\n          setPost(postData);\r\n          setComments(commentsData);\r\n        }\r\n      } catch (err) {\r\n        console.log(err);\r\n        if (isMounted) setError(\"An error occured while loading the post.\");\r\n      }\r\n    };\r\n\r\n    handleMount();\r\n    return () => { isMounted = false; };\r\n  }, [id]);\r\n\r\n  // Redirect unauthenticated users to signup page\r\n  if (!currentUser) {\r\n    return <Redirect to=\"/signup\" />;\r\n  }\r\n\r\n  if (error) {\r\n    return (\r\n      <Container className={appStyles.Content}>\r\n        <h4>{error}</h4>\r\n      </Container>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <Row className=\"h-100\">\r\n      {/* Left side: Post content and comments */}\r\n      <Col className=\"py-2 p-0 p-lg-2\" lg={8}>\r\n        {/* Display post or loading spinner */}\r\n        {post ? (\r\n          <Post {...post} setPost={setPost} postPage />\r\n        ) : (\r\n          <Asset spinner />\r\n        )}\r\n\r\n        {/* Comment section */}\r\n        <Container className={appStyles.Content}>\r\n          {/* Show comment form if user is logged in */}\r\n          {currentUser ? (\r\n            <CommentCreateForm\r\n              user_id={currentUser.user_id}\r\n              profilePicture={profile_picture}\r\n              post={id}\r\n              setPost={setPost}\r\n              setComments={setComments}\r\n            />\r\n          ) : comments.results.length ? (\r\n            \"Comments\"\r\n          ) : null}\r\n\r\n          {/* Show existing comments with infinite scroll */}\r\n          {comments.results.length ? (\r\n            <InfiniteScroll\r\n              dataLength={comments.results.length}\r\n              next={() => fetchMoreData(comments, setComments)}\r\n              hasMore={!!comments.next}\r\n              loader={<Asset spinner />}\r\n            >\r\n              {comments.results.map((comment) => (\r\n                <Comment\r\n                  key={comment.id}\r\n                  {...comment}\r\n                  setPost={setPost}\r\n                  setComments={setComments}\r\n                  postId={post.id}\r\n                />\r\n              ))}\r\n            </InfiniteScroll>\r\n          ) : currentUser ? (\r\n            <span>No comments yet, be the first to comment!</span>\r\n          ) : (\r\n            <span>No comments... yet</span>\r\n          )}\r\n        </Container>\r\n      </Col>\r\n\r\n      {/* Right side: Popular users list */}\r\n      <Col lg={4} className=\"d-none d-lg-block p-0 p-lg-2\">\r\n        <PopularUsers />\r\n      </Col>\r\n    </Row>\r\n  );\r\n}\r\n\r\nexport default PostPage;\r\n","import React, { useEffect, useState } from \"react\";\r\n\r\nimport Form from \"react-bootstrap/Form\";\r\nimport Col from \"react-bootstrap/Col\";\r\nimport Row from \"react-bootstrap/Row\";\r\nimport Container from \"react-bootstrap/Container\";\r\n\r\nimport Post from \"./Post\";\r\nimport Asset from \"../../components/Asset\";\r\n\r\nimport appStyles from \"../../App.module.css\";\r\nimport styles from \"../../styles/PostsPage.module.css\";\r\nimport { useLocation } from \"react-router\";\r\nimport axios from \"../../api/axiosDefaults\";\r\nimport InfiniteScroll from \"react-infinite-scroll-component\";\r\nimport { fetchMoreData } from \"../../utils/utils\";\r\nimport PopularUsers from \"../users/PopularUsers\";\r\n\r\nfunction PostsPage({ message, filter = \"\" }) {\r\n  // Posts state\r\n  const [posts, setPosts] = useState({ results: [] });\r\n\r\n  // Track loading state\r\n  const [hasLoaded, setHasLoaded] = useState(false);\r\n\r\n  // Track pathname for refetching on route change\r\n  const { pathname } = useLocation();\r\n\r\n  // Search query state\r\n  const [query, setQuery] = useState(\"\");\r\n\r\n  // Fetch posts with search & filter whenever query, pathname, or filter changes\r\n  useEffect(() => {\r\n    const fetchPosts = async () => {\r\n      try {\r\n        const response = await axios.get(`/posts/`, {\r\n          params: { search: query, filter: filter }\r\n        });\r\n\r\n        if (response.data && Array.isArray(response.data.results)) {\r\n          setPosts(response.data);\r\n        } else {\r\n          console.error(\"Invalid response data format:\", response.data);\r\n        }\r\n\r\n        setHasLoaded(true);\r\n      } catch (err) {\r\n        console.error(\"Error fetching posts:\", err);\r\n        setHasLoaded(true);  // prevent permanent spinner if error happens\r\n      }\r\n    };\r\n\r\n    setHasLoaded(false);\r\n\r\n    // Debounce API call by 1s when user types\r\n    const timer = setTimeout(() => {\r\n      fetchPosts();\r\n    }, 1000);\r\n\r\n    return () => {\r\n      clearTimeout(timer);\r\n    };\r\n  }, [filter, query, pathname]);\r\n\r\n  return (\r\n    <Row className=\"h-100\">\r\n      {/* Left Column - Posts + Search */}\r\n      <Col className=\"py-2 p-0 p-lg-2\" lg={8}>\r\n        <PopularUsers mobile />\r\n\r\n        <i className={`fas fa-search ${styles.SearchIcon}`} />\r\n\r\n        <Form\r\n          className={styles.SearchBar}\r\n          onSubmit={(event) => event.preventDefault()}\r\n        >\r\n          <Form.Control\r\n            value={query}\r\n            onChange={(event) => setQuery(event.target.value)}\r\n            type=\"text\"\r\n            className=\"mr-sm-2\"\r\n            placeholder=\"Search posts...\"\r\n          />\r\n        </Form>\r\n\r\n        {/* Handle loaded vs loading state */}\r\n        {hasLoaded ? (\r\n          <>\r\n            {posts?.results?.length ? (\r\n              <InfiniteScroll\r\n                children={posts.results.map((post) => (\r\n                  <Post key={post.id} {...post} setPosts={setPosts} />\r\n                ))}\r\n                dataLength={posts.results.length}\r\n                loader={<Asset spinner />}\r\n                hasMore={!!posts.next}\r\n                next={() => fetchMoreData(posts, setPosts)}\r\n              />\r\n            ) : (\r\n              <Container className={appStyles.Content}>\r\n                <Asset message={message || \"No posts found.\"} />\r\n              </Container>\r\n            )}\r\n          </>\r\n        ) : (\r\n          <Container className={appStyles.Content}>\r\n            <Asset spinner />\r\n          </Container>\r\n        )}\r\n      </Col>\r\n\r\n      {/* Right Column - Desktop Popular Users */}\r\n      <Col md={4} className=\"d-none d-lg-block p-0 p-lg-2\">\r\n        <PopularUsers />\r\n      </Col>\r\n    </Row>\r\n  );\r\n}\r\n\r\nexport default PostsPage;\r\n","import React, { useRef, useState, useEffect } from \"react\";\r\n\r\nimport Form from \"react-bootstrap/Form\";\r\nimport Button from \"react-bootstrap/Button\";\r\nimport Row from \"react-bootstrap/Row\";\r\nimport Col from \"react-bootstrap/Col\";\r\nimport Container from \"react-bootstrap/Container\";\r\nimport Alert from \"react-bootstrap/Alert\";\r\n\r\nimport Asset from \"../../components/Asset\";\r\n\r\nimport styles from \"../../styles/PostCreateEditForm.module.css\";\r\nimport appStyles from \"../../App.module.css\";\r\nimport btnStyles from \"../../styles/Button.module.css\";\r\nimport axios from \"../../api/axiosDefaults\";\r\nimport { useHistory, useParams } from \"react-router-dom\";\r\n\r\nfunction PostEditForm() {\r\n    // Error state for backend validation\r\n    const [errors, setErrors] = useState({});\r\n\r\n    // Form data state\r\n    const [postData, setPostData] = useState({\r\n        title: \"\",\r\n        game: \"\",\r\n        content: \"\",\r\n        image: \"\",\r\n    });\r\n    const { title, game, content, image } = postData;\r\n\r\n    // Refs and router hooks\r\n    const imageInput = useRef(null);\r\n    const history = useHistory();\r\n    const { id } = useParams();\r\n\r\n    // Fetch existing post data on mount\r\n    useEffect(() => {\r\n        const handleMount = async () => {\r\n            try {\r\n                const { data } = await axios.get(`/posts/${id}/`)\r\n                const { title, game, content, image, is_author } = data;\r\n\r\n                // Only allow authors to edit their own posts\r\n                if (is_author) {\r\n                    setPostData({ title, game, content, image });\r\n                } else {\r\n                    history.push(\"/\");\r\n                }\r\n            } catch (err) {\r\n                console.log(err);\r\n            }\r\n        };\r\n\r\n        handleMount();\r\n    }, [history, id]);\r\n\r\n    // Handle text input changes\r\n    const handleChange = (event) => {\r\n        setPostData({\r\n            ...postData,\r\n            [event.target.name]: event.target.value,\r\n        });\r\n    };\r\n\r\n    // Image preview state\r\n    const [imagePreview, setImagePreview] = useState(null);\r\n\r\n    // Handle image file selection\r\n    const handleChangeImage = (event) => {\r\n        if (event.target.files.length) {\r\n            const file = event.target.files[0];\r\n\r\n            // Set image preview URL\r\n            setImagePreview(URL.createObjectURL(file));\r\n\r\n            setPostData({\r\n                ...postData,\r\n                image: file,\r\n            });\r\n        }\r\n    };\r\n\r\n    // Submit form\r\n    const handleSubmit = async (event) => {\r\n        event.preventDefault();\r\n\r\n        const formData = new FormData();\r\n        const authorId = parseInt(localStorage.getItem('user_id'), 10);\r\n\r\n        formData.append('title', title);\r\n        formData.append('game', game);\r\n        formData.append('content', content);\r\n        if (imageInput?.current?.files[0]) {\r\n            formData.append('image', imageInput.current.files[0]);\r\n        }\r\n        formData.append('author', authorId);\r\n\r\n        try {\r\n            await axios.put(`/posts/${id}/`, formData, {\r\n                headers: {\r\n                    Authorization: `Bearer ${localStorage.getItem('access_token')}`,\r\n                    'Content-Type': 'multipart/form-data',\r\n                },\r\n            });\r\n\r\n            history.push(`/posts/${id}`);\r\n        } catch (err) {\r\n            if (err.response?.status !== 401) {\r\n                setErrors(err.response?.data);\r\n            }\r\n        }\r\n    };\r\n\r\n    // Form fields section reused on both mobile and desktop\r\n    const textFields = (\r\n        <div className=\"text-center\">\r\n            <Form.Group>\r\n                <Form.Label>Title</Form.Label>\r\n                <Form.Control\r\n                    type=\"text\"\r\n                    name=\"title\"\r\n                    placeholder=\"Type the title of your post...\"\r\n                    value={title}\r\n                    onChange={handleChange}\r\n                />\r\n            </Form.Group>\r\n            {errors?.title?.map((message, idx) => (\r\n                <Alert variant=\"warning\" key={idx}>\r\n                    {message}\r\n                </Alert>\r\n            ))}\r\n\r\n            <Form.Group>\r\n                <Form.Label>Game</Form.Label>\r\n                <Form.Control\r\n                    type=\"text\"\r\n                    name=\"game\"\r\n                    placeholder=\"Type the name of the game...\"\r\n                    value={game}\r\n                    onChange={handleChange}\r\n                />\r\n            </Form.Group>\r\n            {errors?.game?.map((message, idx) => (\r\n                <Alert variant=\"warning\" key={idx}>\r\n                    {message}\r\n                </Alert>\r\n            ))}\r\n            <Form.Group>\r\n                <Form.Label>Content</Form.Label>\r\n                <Form.Control\r\n                    as=\"textarea\"\r\n                    rows={6}\r\n                    name=\"content\"\r\n                    placeholder=\"Share the story behind your post...\"\r\n                    value={content}\r\n                    onChange={handleChange}\r\n                />\r\n            </Form.Group>\r\n            {errors?.content?.map((message, idx) => (\r\n                <Alert variant=\"warning\" key={idx}>\r\n                    {message}\r\n                </Alert>\r\n            ))}\r\n\r\n            {/* Buttons */}\r\n            <Button\r\n                className={`${btnStyles.Button} ${btnStyles.Blue}`}\r\n                onClick={() => history.goBack()}\r\n            >\r\n                cancel\r\n            </Button>\r\n            <Button\r\n                className={`${btnStyles.Button} ${btnStyles.Blue}`} type=\"submit\">\r\n                save\r\n            </Button>\r\n        </div>\r\n    );\r\n\r\n    return (\r\n        <Form onSubmit={handleSubmit}>\r\n            <Row>\r\n                {/* Left: Image upload and preview */}\r\n                <Col className=\"py-2 p-0 p-md-2\" md={7} lg={8}>\r\n                    <Container\r\n                        className={`${appStyles.Content} ${styles.Container} d-flex flex-column justify-content-center`}\r\n                    >\r\n                        <Form.Group className=\"text-center\">\r\n                            {imagePreview ? (\r\n                                // If image exists, show the preview using Asset\r\n                                <img\r\n                                    src={imagePreview}\r\n                                    alt=\"\"\r\n                                    className=\"img-fluid mb-3\"\r\n                                    style={{ maxHeight: '200px', objectFit: 'cover' }}\r\n                                />\r\n                            ) : (\r\n                                // If no image, show upload icon + message via Asset\r\n                                <Asset\r\n                                    message=\"Click or tap to upload an image\"\r\n                                    spinner={false}\r\n                                    src={null}\r\n                                />\r\n                            )}\r\n\r\n                            {/* Upload Button (appears even if image is shown) */}\r\n                            <Form.Label\r\n                                className={`${btnStyles.uploadButton} ${btnStyles.Blue} btn mt-3`}\r\n                                htmlFor=\"image-upload\"\r\n                            >\r\n                                {image ? \"Change the image\" : (\r\n                                    <div className=\"d-flex flex-column align-items-center\">\r\n                                        <i className=\"fa-solid fa-upload fa-3x mb-2\"></i>\r\n                                        Upload an image\r\n                                    </div>\r\n                                )}\r\n                            </Form.Label>\r\n\r\n                            {/* Hidden file input */}\r\n                            <Form.Control\r\n                                id=\"image-upload\"\r\n                                type=\"file\"\r\n                                accept=\"image/*\"\r\n                                onChange={handleChangeImage}\r\n                                ref={imageInput}\r\n                                className=\"d-none\"\r\n                            />\r\n                        </Form.Group>\r\n                        {errors?.image?.map((message, idx) => (\r\n                            <Alert variant=\"warning\" key={idx}>\r\n                                {message}\r\n                            </Alert>\r\n                        ))}\r\n                        {/* Mobile view text fields */}\r\n                        <div className=\"d-md-none\">{textFields}</div>\r\n                    </Container>\r\n                </Col>\r\n\r\n                {/* Right: Desktop view text fields */}\r\n                <Col md={5} lg={4} className=\"d-none d-md-block p-0 p-md-2\">\r\n                    <Container className={appStyles.Content}>{textFields}</Container>\r\n                </Col>\r\n            </Row>\r\n        </Form>\r\n    );\r\n}\r\n\r\nexport default PostEditForm;","import React, { useEffect, useState } from \"react\";\r\n\r\nimport Col from \"react-bootstrap/Col\";\r\nimport Row from \"react-bootstrap/Row\";\r\nimport Container from \"react-bootstrap/Container\";\r\nimport { Button, Image } from \"react-bootstrap\";\r\n\r\nimport Asset from \"../../components/Asset\";\r\n\r\nimport styles from \"../../styles/UserPage.module.css\";\r\nimport appStyles from \"../../App.module.css\";\r\nimport btnStyles from \"../../styles/Button.module.css\";\r\n\r\nimport PopularUsers from \"./PopularUsers\";\r\nimport { useCurrentUser } from \"../../contexts/CurrentUserContext\";\r\nimport { useParams } from \"react-router-dom\";\r\nimport axios from \"../../api/axiosDefaults\";\r\nimport { useUserData, useSetUserData } from \"../../contexts/UserDataContext\";\r\nimport InfiniteScroll from \"react-infinite-scroll-component\";\r\nimport Post from \"../posts/Post\";\r\nimport { fetchMoreData } from \"../../utils/utils\";\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faMagnifyingGlass } from '@fortawesome/free-solid-svg-icons';\r\nimport { UserEditDropdown } from \"../../components/MoreDropdown\";\r\n\r\nfunction UserPage() {\r\n    // Local state to track posts and loading state\r\n    const [hasLoaded, setHasLoaded] = useState(false);\r\n    const [userPosts, setUserPosts] = useState({ results: [] });\r\n\r\n    // Current logged-in user and URL param id\r\n    const currentUser = useCurrentUser();\r\n    const { id } = useParams();\r\n\r\n    // User data context hooks\r\n    const setUserData = useSetUserData();\r\n    const { pageUser, handleFollowToggle } = useUserData();\r\n\r\n    // Extract user object from user data context\r\n    const user = pageUser?.results?.[0] || null;\r\n\r\n    // Check if current user is viewing their own profile\r\n    const is_author = currentUser?.username === user?.username;\r\n\r\n    useEffect(() => {\r\n        if (!id) return;\r\n\r\n        // Reset posts and loading state when id changes\r\n        setUserPosts({ results: [] });\r\n        setHasLoaded(false);\r\n\r\n        // Fetch user profile and posts in parallel\r\n        const fetchData = async () => {\r\n            try {\r\n                const [{ data: pageUserData }, { data: userPostsData }] = await Promise.all([\r\n                    axios.get(`users/${id}/`),\r\n                    axios.get(`/posts/?author=${id}`),\r\n                ]);\r\n                // Update user data context with fetched user info\r\n                setUserData(prev => ({\r\n                    ...prev,\r\n                    pageUser: { results: [pageUserData] },\r\n                }));\r\n                // Set posts and mark loaded\r\n                setUserPosts(userPostsData);\r\n                setHasLoaded(true);\r\n            } catch (err) {\r\n                console.error(\"Error fetching user data:\", err);\r\n            }\r\n        };\r\n\r\n        fetchData();\r\n    }, [id, setUserData, currentUser]);\r\n\r\n    // Handles toggling follow/unfollow\r\n    const onFollowToggle = async () => {\r\n        if (!user) return;\r\n        await handleFollowToggle(user.id);\r\n    };\r\n\r\n    // Main user profile header + info\r\n    const mainProfile = (\r\n        <>\r\n            {/* Show dropdown if user owns this profile */}\r\n            {user?.is_owner && <UserEditDropdown id={user?.id} />}\r\n            <Row noGutters className=\"px-3 text-center\">\r\n                <Col lg={3} className=\"text-lg-left\">\r\n                    <Image\r\n                        className={styles.ProfilePicture}\r\n                        roundedCircle\r\n                        src={\r\n                            user?.profile_picture\r\n                                ? `${user.profile_picture}?${Date.now()}` // Cache bust for updated pic\r\n                                : \"https://res.cloudinary.com/dumjqhvzz/image/upload/v1736331882/default_profile_snzudq.jpg\"\r\n                        }\r\n                        onError={(e) => {\r\n                            e.target.src = \"https://res.cloudinary.com/dumjqhvzz/image/upload/v1736331882/default_profile_snzudq.jpg\";\r\n                        }}\r\n                    />\r\n                </Col>\r\n                <Col lg={6}>\r\n                    <h3 className=\"m-2\">{user?.username || \"User\"}</h3>\r\n                    <Row className=\"justify-content-center no-gutters\">\r\n                        <Col xs={3} className=\"my-2\">\r\n                            <div>{user?.followers}</div>\r\n                            <div>followers</div>\r\n                        </Col>\r\n                        <Col xs={3} className=\"my-2\">\r\n                            <div>{user?.posts_count ?? 0}</div>\r\n                            <div>posts</div>\r\n                        </Col>\r\n                        <Col xs={3} className=\"my-2\">\r\n                            <div>{is_author ? currentUser?.following : user?.following}</div>\r\n                            <div>following</div>\r\n                        </Col>\r\n                    </Row>\r\n                </Col>\r\n                <Col lg={3} className=\"text-lg-right\">\r\n                    {/* Show follow/unfollow button if viewing others' profiles */}\r\n                    {currentUser && !is_author && (\r\n                        user?.following_id ? (\r\n                            <Button\r\n                                className={`${btnStyles.Button} ${btnStyles.BlackOutline}`}\r\n                                onClick={onFollowToggle}\r\n                            >\r\n                                unfollow\r\n                            </Button>\r\n                        ) : (\r\n                            <Button\r\n                                className={`${btnStyles.Button} ${btnStyles.Black}`}\r\n                                onClick={onFollowToggle}\r\n                            >\r\n                                follow\r\n                            </Button>\r\n                        )\r\n                    )}\r\n                </Col>\r\n                {user?.bio && <Col className=\"p-3\">{user.bio}</Col>}\r\n            </Row>\r\n        </>\r\n    );\r\n\r\n    // User's posts with infinite scroll\r\n    const mainProfilePosts = (\r\n        <>\r\n            <hr />\r\n            <p className=\"text-center\">{user?.username}'s posts</p>\r\n            <hr />\r\n            {userPosts.results.length ? (\r\n                <InfiniteScroll\r\n                    dataLength={userPosts.results.length}\r\n                    next={() => fetchMoreData(userPosts, setUserPosts)}\r\n                    hasMore={!!userPosts.next}\r\n                    loader={<Asset spinner />}\r\n                >\r\n                    {userPosts.results.map((post) => (\r\n                        <Post key={post.id} {...post} setPosts={setUserPosts} />\r\n                    ))}\r\n                </InfiniteScroll>\r\n            ) : (\r\n                <div className=\"text-center p-3\">\r\n                    <FontAwesomeIcon icon={faMagnifyingGlass} size=\"3x\" />\r\n                    <p>No results found, {user?.username} hasn't posted yet.</p>\r\n                </div>\r\n            )}\r\n        </>\r\n    );\r\n\r\n    return (\r\n        <Row>\r\n            {/* Main content column with profile info and posts */}\r\n            <Col className=\"py-2 p-0 p-lg-2\" lg={8}>\r\n                <PopularUsers mobile />\r\n                <Container className={appStyles.Content}>\r\n                    {hasLoaded ? (\r\n                        <>\r\n                            {mainProfile}\r\n                            {mainProfilePosts}\r\n                        </>\r\n                    ) : (\r\n                        <Asset spinner />\r\n                    )}\r\n                </Container>\r\n            </Col>\r\n\r\n            {/* Sidebar with popular users (desktop only) */}\r\n            <Col lg={4} className=\"d-none d-lg-block p-0 p-lg-2\">\r\n                <PopularUsers />\r\n            </Col>\r\n        </Row>\r\n    );\r\n}\r\n\r\nexport default UserPage;\r\n","import React, { useEffect, useState } from \"react\";\r\n\r\nimport Alert from \"react-bootstrap/Alert\";\r\nimport Button from \"react-bootstrap/Button\";\r\nimport Col from \"react-bootstrap/Col\";\r\nimport Container from \"react-bootstrap/Container\";\r\nimport Form from \"react-bootstrap/Form\";\r\nimport Row from \"react-bootstrap/Row\";\r\n\r\nimport { useHistory, useParams } from \"react-router-dom\";\r\nimport axios from \"../../api/axiosDefaults\";\r\nimport {\r\n    useCurrentUser,\r\n    useSetCurrentUser,\r\n} from \"../../contexts/CurrentUserContext\";\r\nimport { useAlert } from \"../../contexts/AlertContext\";\r\n\r\nimport btnStyles from \"../../styles/Button.module.css\";\r\nimport appStyles from \"../../App.module.css\";\r\n\r\nconst UsernameForm = () => {\r\n    // State to hold the new username input value\r\n    const [username, setUsername] = useState(\"\");\r\n\r\n    // State for storing any validation or server errors\r\n    const [errors, setErrors] = useState({});\r\n\r\n    // Show alert\r\n    const { showAlert } = useAlert();\r\n\r\n    // React Router hooks for navigation and route params\r\n    const history = useHistory();\r\n    const { id } = useParams();\r\n\r\n    // Context for current logged-in user info and updating it\r\n    const currentUser = useCurrentUser();\r\n    const setCurrentUser = useSetCurrentUser();\r\n\r\n    // On mount, verify if the current user matches the id in URL\r\n    useEffect(() => {\r\n        if (currentUser?.id?.toString() !== id) {\r\n            // Redirect if not the owner of this profile\r\n            history.push(\"/\");\r\n        }\r\n    }, [currentUser, history, id]);\r\n\r\n    // Submit handler to save new username\r\n    const handleSubmit = async (event) => {\r\n        event.preventDefault();\r\n\r\n        // Simple client-side length validation\r\n        if (username.length > 24) {\r\n            setErrors({ username: [\"Name too long. 24 characters maximum.\"] });\r\n            return;\r\n        }\r\n\r\n        try {\r\n            // PATCH request to update username on the backend\r\n            await axios.patch(\"/dj-rest-auth/user/\", {\r\n                username,\r\n            });\r\n\r\n            // Update current user context with the new username\r\n            setCurrentUser((prevUser) => ({\r\n                ...prevUser,\r\n                username,\r\n            }));\r\n            showAlert({ message: \"Username successfully edited!\", variant: \"success\" });\r\n\r\n            // Navigate back after saving\r\n            history.goBack();\r\n        } catch (err) {\r\n            console.log(err);\r\n            // Show any server errors returned\r\n            setErrors(err.response?.data || {});\r\n        }\r\n    };\r\n\r\n    // Don’t render form until currentUser is loaded (avoids flicker)\r\n    if (currentUser === undefined) {\r\n        return null;\r\n    }\r\n\r\n    return (\r\n        <Row>\r\n            <Col className=\"py-2 mx-auto text-center\" md={6}>\r\n                <Container className={appStyles.Content}>\r\n                    <Form onSubmit={handleSubmit} className=\"my-2\">\r\n                        <Form.Group>\r\n                            <Form.Label>Change username</Form.Label>\r\n                            <Form.Control\r\n                                placeholder=\"username\"\r\n                                type=\"text\"\r\n                                value={username}\r\n                                onChange={(event) => setUsername(event.target.value)}\r\n                                maxLength={24} // max length enforced in input\r\n                                autoComplete=\"off\"\r\n                                spellCheck={false}\r\n                            />\r\n                        </Form.Group>\r\n\r\n                        {/* Show any username errors */}\r\n                        {errors?.username?.map((message, idx) => (\r\n                            <Alert key={idx} variant=\"warning\">\r\n                                {message}\r\n                            </Alert>\r\n                        ))}\r\n\r\n                        {/* Cancel button goes back */}\r\n                        <Button\r\n                            type=\"button\"\r\n                            className={`${btnStyles.Button} ${btnStyles.Blue} mr-2`}\r\n                            onClick={() => history.goBack()}\r\n                        >\r\n                            cancel\r\n                        </Button>\r\n\r\n                        {/* Save button disabled if username is empty or whitespace */}\r\n                        <Button\r\n                            className={`${btnStyles.Button} ${btnStyles.Blue}`}\r\n                            type=\"submit\"\r\n                            disabled={!username.trim()}\r\n                        >\r\n                            save\r\n                        </Button>\r\n                    </Form>\r\n                </Container>\r\n            </Col>\r\n        </Row>\r\n    );\r\n};\r\n\r\nexport default UsernameForm;\r\n","import React, { useEffect, useState } from \"react\";\r\n\r\nimport Alert from \"react-bootstrap/Alert\";\r\nimport Button from \"react-bootstrap/Button\";\r\nimport Container from \"react-bootstrap/Container\";\r\nimport Row from \"react-bootstrap/Row\";\r\nimport Col from \"react-bootstrap/Col\";\r\nimport Form from \"react-bootstrap/Form\";\r\n\r\nimport { useHistory, useParams } from \"react-router-dom\";\r\nimport axios from \"../../api/axiosDefaults\";\r\nimport { useCurrentUser } from \"../../contexts/CurrentUserContext\";\r\n\r\nimport btnStyles from \"../../styles/Button.module.css\";\r\nimport appStyles from \"../../App.module.css\";\r\n\r\nconst UserPasswordForm = () => {\r\n    const history = useHistory();\r\n    const { id } = useParams();\r\n    const currentUser = useCurrentUser();\r\n\r\n    const [userData, setUserData] = useState({\r\n        new_password1: \"\",\r\n        new_password2: \"\",\r\n    });\r\n    const { new_password1, new_password2 } = userData;\r\n\r\n    // Store validation and server errors\r\n    const [errors, setErrors] = useState({});\r\n    // Store dynamic status messages for UX\r\n    const [statusMessage, setStatusMessage] = useState(null);\r\n    // Track form submitting state\r\n    const [isSubmitting, setIsSubmitting] = useState(false);\r\n\r\n    // Update form inputs on change\r\n    const handleChange = (event) => {\r\n        setUserData({\r\n            ...userData,\r\n            [event.target.name]: event.target.value,\r\n        });\r\n\r\n        // Clear previous errors and status on input change for better UX\r\n        setErrors({});\r\n        setStatusMessage(null);\r\n    };\r\n\r\n    // Redirect if current user is not profile owner\r\n    useEffect(() => {\r\n        if (currentUser?.id?.toString() !== id) {\r\n            history.push(\"/\");\r\n        }\r\n    }, [currentUser, id, history]);\r\n\r\n    const handleSubmit = async (event) => {\r\n        event.preventDefault();\r\n\r\n        // Client-side password match validation\r\n        if (new_password1 !== new_password2) {\r\n            setErrors({ new_password2: [\"Passwords do not match.\"] });\r\n            setStatusMessage(null);\r\n            return;\r\n        }\r\n\r\n        // Indicate submission is in progress\r\n        setIsSubmitting(true);\r\n        setErrors({});\r\n        setStatusMessage(null);\r\n\r\n        try {\r\n            // Call backend to change password\r\n            await axios.post(\"/dj-rest-auth/password/change/\", userData);\r\n            // Show success message\r\n            setStatusMessage({ type: \"success\", text: \"Password changed successfully!\" });\r\n            setIsSubmitting(false);\r\n            // After short delay, navigate back\r\n            setTimeout(() => {\r\n                history.goBack();\r\n            }, 1500);\r\n        } catch (err) {\r\n            setIsSubmitting(false);\r\n            // Show server errors or generic error message\r\n            setErrors(\r\n                err.response?.data || {\r\n                    non_field_errors: [\"Something went wrong. Please try again.\"],\r\n                }\r\n            );\r\n            setStatusMessage(null);\r\n        }\r\n    };\r\n\r\n    // Disable Save button if passwords empty or don't match or form is submitting\r\n    const isSaveDisabled =\r\n        !new_password1.trim() ||\r\n        !new_password2.trim() ||\r\n        new_password1 !== new_password2 ||\r\n        isSubmitting;\r\n\r\n    return (\r\n        <Row>\r\n            <Col className=\"py-2 mx-auto text-center\" md={6}>\r\n                <Container className={appStyles.Content}>\r\n                    <Form onSubmit={handleSubmit}>\r\n                        {/* New password input */}\r\n                        <Form.Group>\r\n                            <Form.Label>New password</Form.Label>\r\n                            <Form.Control\r\n                                placeholder=\"new password\"\r\n                                type=\"password\"\r\n                                value={new_password1}\r\n                                onChange={handleChange}\r\n                                name=\"new_password1\"\r\n                                autoComplete=\"new-password\"\r\n                                disabled={isSubmitting}\r\n                            />\r\n                        </Form.Group>\r\n\r\n                        {/* Show errors related to new_password1 */}\r\n                        {errors?.new_password1?.map((message, idx) => (\r\n                            <Alert key={idx} variant=\"warning\" className=\"mt-1\">\r\n                                {message}\r\n                            </Alert>\r\n                        ))}\r\n\r\n                        {/* Confirm password input */}\r\n                        <Form.Group>\r\n                            <Form.Label>Confirm password</Form.Label>\r\n                            <Form.Control\r\n                                placeholder=\"confirm new password\"\r\n                                type=\"password\"\r\n                                value={new_password2}\r\n                                onChange={handleChange}\r\n                                name=\"new_password2\"\r\n                                autoComplete=\"new-password\"\r\n                                disabled={isSubmitting}\r\n                            />\r\n                        </Form.Group>\r\n\r\n                        {/* Show errors related to new_password2 */}\r\n                        {errors?.new_password2?.map((message, idx) => (\r\n                            <Alert key={idx} variant=\"warning\" className=\"mt-1\">\r\n                                {message}\r\n                            </Alert>\r\n                        ))}\r\n\r\n                        {/* Show any other non-field errors */}\r\n                        {errors?.non_field_errors?.map((message, idx) => (\r\n                            <Alert key={idx} variant=\"warning\" className=\"mt-1\">\r\n                                {message}\r\n                            </Alert>\r\n                        ))}\r\n\r\n                        {/* Dynamic status message (success or info) */}\r\n                        {statusMessage && (\r\n                            <Alert\r\n                                variant={statusMessage.type === \"success\" ? \"success\" : \"info\"}\r\n                                className=\"mt-3\"\r\n                            >\r\n                                {statusMessage.text}\r\n                            </Alert>\r\n                        )}\r\n\r\n                        {/* Cancel button */}\r\n                        <Button\r\n                            type=\"button\"\r\n                            className={`${btnStyles.Button} ${btnStyles.Blue} mr-2`}\r\n                            onClick={() => history.goBack()}\r\n                            disabled={isSubmitting}\r\n                        >\r\n                            cancel\r\n                        </Button>\r\n\r\n                        {/* Save button */}\r\n                        <Button\r\n                            type=\"submit\"\r\n                            className={`${btnStyles.Button} ${btnStyles.Blue}`}\r\n                            disabled={isSaveDisabled}\r\n                        >\r\n                            {isSubmitting ? \"Saving...\" : \"save\"}\r\n                        </Button>\r\n                    </Form>\r\n                </Container>\r\n            </Col>\r\n        </Row>\r\n    );\r\n};\r\n\r\nexport default UserPasswordForm;\r\n","import React, { useState, useEffect, useRef } from \"react\";\r\nimport { useHistory, useParams } from \"react-router-dom\";\r\n\r\nimport Form from \"react-bootstrap/Form\";\r\nimport Button from \"react-bootstrap/Button\";\r\nimport Image from \"react-bootstrap/Image\";\r\nimport Row from \"react-bootstrap/Row\";\r\nimport Col from \"react-bootstrap/Col\";\r\nimport Container from \"react-bootstrap/Container\";\r\nimport Alert from \"react-bootstrap/Alert\";\r\n\r\nimport axios from \"../../api/axiosDefaults\";\r\nimport {\r\n    useCurrentUser,\r\n    useSetCurrentUser,\r\n} from \"../../contexts/CurrentUserContext\";\r\nimport { useAlert } from \"../../contexts/AlertContext\";\r\n\r\nimport btnStyles from \"../../styles/Button.module.css\";\r\nimport appStyles from \"../../App.module.css\";\r\n\r\nconst UserEditForm = () => {\r\n    // Current logged-in user and setter to update the context after profile edit\r\n    const currentUser = useCurrentUser();\r\n    const setCurrentUser = useSetCurrentUser();\r\n\r\n    // Extract user id param from the URL (e.g., /users/:id/edit)\r\n    const { id } = useParams();\r\n    \r\n    // Show alert\r\n    const { showAlert } = useAlert();\r\n\r\n    // History hook for navigation\r\n    const history = useHistory();\r\n\r\n    // Ref to the file input element to access the uploaded file\r\n    const imageFile = useRef();\r\n\r\n    // Local state for the form inputs (bio text and profile picture preview)\r\n    const [userData, setUserData] = useState({\r\n        bio: \"\",\r\n        profile_picture: \"\",\r\n    });\r\n    const { bio, profile_picture } = userData;\r\n\r\n    // Local state to hold validation or server errors returned by backend\r\n    const [errors, setErrors] = useState({});\r\n\r\n    // Submitting state to disable inputs while request is in flight\r\n    const [submitting, setSubmitting] = useState(false);\r\n\r\n    // Clean up created object URL for image preview to avoid memory leaks\r\n    useEffect(() => {\r\n        return () => {\r\n            if (profile_picture && profile_picture.startsWith(\"blob:\")) {\r\n                URL.revokeObjectURL(profile_picture);\r\n            }\r\n        };\r\n    }, [profile_picture]);\r\n\r\n    // Load the user data on mount if the current user matches the id param\r\n    useEffect(() => {\r\n        const handleMount = async () => {\r\n            // Only allow editing if logged-in user is editing their own profile\r\n            if (currentUser?.id?.toString() === id) {\r\n                try {\r\n                    // Fetch user data from backend API\r\n                    const { data } = await axios.get(`/users/${id}/`);\r\n                    const { bio, profile_picture } = data;\r\n\r\n                    // Set form state with fetched data\r\n                    setUserData({\r\n                        bio,\r\n                        profile_picture: profile_picture || \"\",\r\n                    });\r\n                } catch (err) {\r\n                    // If error, log and redirect to homepage\r\n                    console.log(err);\r\n                    history.push(\"/\");\r\n                }\r\n            } else {\r\n                // Redirect if trying to edit another user's profile\r\n                history.push(\"/\");\r\n            }\r\n        };\r\n\r\n        handleMount();\r\n    }, [currentUser, history, id]);\r\n\r\n    // Generic handler to update form input fields (only bio here)\r\n    const handleChange = (event) => {\r\n        setUserData({\r\n            ...userData,\r\n            [event.target.name]: event.target.value,\r\n        });\r\n    };\r\n\r\n    // Submit handler for saving changes\r\n    const handleSubmit = async (event) => {\r\n        event.preventDefault();\r\n        setSubmitting(true); // Disable form inputs\r\n\r\n        // Create multipart/form-data payload to allow image upload\r\n        const formData = new FormData();\r\n        formData.append(\"bio\", bio);\r\n\r\n        // Append image file only if user selected a new one\r\n        if (imageFile.current?.files[0]) {\r\n            formData.append(\"profile_picture\", imageFile.current.files[0]);\r\n        }\r\n\r\n        try {\r\n            // Send PATCH request to update user profile\r\n            const { data } = await axios.patch(`/users/${id}/`, formData, {\r\n                headers: { \"Content-Type\": \"multipart/form-data\" },\r\n            });\r\n\r\n            // Update local form state with saved data (could include new profile_picture URL)\r\n            setUserData({\r\n                bio: data.bio,\r\n                profile_picture: data.profile_picture,\r\n            });\r\n\r\n            // Update current user context with new profile picture URL\r\n            setCurrentUser((prevUser) => ({\r\n                ...prevUser,\r\n                profile_picture: data.profile_picture,\r\n            }));\r\n\r\n            showAlert({ message: \"User successfully edited!\", variant: \"success\" });\r\n\r\n            // After short delay, navigate back to previous page\r\n            setTimeout(() => {\r\n                history.goBack();\r\n            }, 100);\r\n        } catch (err) {\r\n            // Show errors if the server returns validation errors\r\n            console.error(\"Error:\", err.response?.data);\r\n            setErrors(err.response?.data || {});\r\n        } finally {\r\n            setSubmitting(false); // Re-enable form inputs\r\n        }\r\n    };\r\n\r\n    // Form fields for text inputs and buttons\r\n    const textFields = (\r\n        <>\r\n            <Form.Group>\r\n                <Form.Label>Bio</Form.Label>\r\n                <Form.Control\r\n                    as=\"textarea\"\r\n                    value={bio}\r\n                    onChange={handleChange}\r\n                    name=\"bio\"\r\n                    rows={7}\r\n                    disabled={submitting}\r\n                />\r\n                {/* Show any bio errors from server */}\r\n                {errors?.bio?.map((message, idx) => (\r\n                    <Alert variant=\"warning\" key={idx}>\r\n                        {message}\r\n                    </Alert>\r\n                ))}\r\n            </Form.Group>\r\n\r\n            {/* Cancel button to go back */}\r\n            <Button\r\n                type=\"button\"\r\n                className={`${btnStyles.Button} ${btnStyles.Blue} mr-2`}\r\n                onClick={() => history.goBack()}\r\n                disabled={submitting}\r\n            >\r\n                cancel\r\n            </Button>\r\n\r\n            {/* Submit button */}\r\n            <Button\r\n                className={`${btnStyles.Button} ${btnStyles.Blue}`}\r\n                type=\"submit\"\r\n                disabled={submitting}\r\n            >\r\n                {submitting ? \"Saving...\" : \"save\"}\r\n            </Button>\r\n        </>\r\n    );\r\n\r\n    return (\r\n        <Form onSubmit={handleSubmit}>\r\n            <Row>\r\n                {/* Left column for image upload and preview */}\r\n                <Col className=\"py-2 p-0 p-md-2 text-center\" md={7} lg={6}>\r\n                    <Container className={appStyles.Content}>\r\n                        <Form.Group>\r\n                            <figure>\r\n                                <Image\r\n                                    src={\r\n                                        profile_picture\r\n                                            ? profile_picture\r\n                                            : \"https://res.cloudinary.com/dumjqhvzz/image/upload/v1736331882/default_profile_snzudq.jpg\"\r\n                                    }\r\n                                    fluid\r\n                                    alt={`${currentUser?.username || \"User\"}'s profile`}\r\n                                />\r\n                            </figure>\r\n\r\n                            {/* Show image upload errors */}\r\n                            {errors?.profile_picture?.map((message, idx) => (\r\n                                <Alert variant=\"warning\" key={idx}>\r\n                                    {message}\r\n                                </Alert>\r\n                            ))}\r\n\r\n                            <div>\r\n                                {/* Label styled as button to trigger file input */}\r\n                                <Form.Label\r\n                                    className={`${btnStyles.Button} ${btnStyles.Blue} btn my-auto`}\r\n                                    htmlFor=\"image-upload\"\r\n                                >\r\n                                    Change the image\r\n                                </Form.Label>\r\n                            </div>\r\n\r\n                            {/* Hidden file input for image upload */}\r\n                            <Form.Control\r\n                                id=\"image-upload\"\r\n                                ref={imageFile}\r\n                                type=\"file\"\r\n                                accept=\"image/*\"\r\n                                onChange={(e) => {\r\n                                    // Show preview of new selected image\r\n                                    if (e.target.files.length) {\r\n                                        setUserData({\r\n                                            ...userData,\r\n                                            profile_picture: URL.createObjectURL(e.target.files[0]),\r\n                                        });\r\n                                    }\r\n                                }}\r\n                                disabled={submitting}\r\n                            />\r\n                        </Form.Group>\r\n\r\n                        {/* On small screens show text fields below image */}\r\n                        <div className=\"d-md-none\">{textFields}</div>\r\n                    </Container>\r\n                </Col>\r\n\r\n                {/* Right column for bio and buttons (hidden on small screens) */}\r\n                <Col md={5} lg={6} className=\"d-none d-md-block p-0 p-md-2 text-center\">\r\n                    <Container className={appStyles.Content}>{textFields}</Container>\r\n                </Col>\r\n            </Row>\r\n        </Form>\r\n    );\r\n};\r\n\r\nexport default UserEditForm;\r\n","import React from \"react\";\r\nimport styles from \"./App.module.css\";\r\nimport NavBar from \"./components/NavBar\";\r\nimport Container from \"react-bootstrap/Container\";\r\nimport { Route, Switch, Redirect } from \"react-router-dom\";\r\nimport \"./api/axiosDefaults\";\r\n\r\nimport SignUpForm from \"./pages/auth/SignUpForm\";\r\nimport SignInForm from \"./pages/auth/SignInForm\";\r\nimport PostCreateForm from \"./pages/posts/PostCreateForm\";\r\nimport PostPage from \"./pages/posts/PostPage\";\r\nimport PostsPage from \"./pages/posts/PostsPage\";\r\nimport PostEditForm from \"./pages/posts/PostEditForm\";\r\nimport UserPage from \"./pages/users/UserPage\";\r\nimport UsernameForm from \"./pages/users/UsernameForm\";\r\nimport UserPasswordForm from \"./pages/users/UserPasswordForm\";\r\nimport UserEditForm from \"./pages/users/UserEditForm\";\r\n\r\n// Import context providers and current user hook\r\nimport { CurrentUserProvider, useCurrentUser } from \"./contexts/CurrentUserContext\";\r\nimport { UserDataProvider } from \"./contexts/UserDataContext\";\r\n\r\n/**\r\n * Protects a route so only authenticated users can access it.\r\n * Otherwise, redirects to /signin.\r\n */\r\nfunction ProtectedRoute({ component: Component, ...rest }) {\r\n  const currentUser = useCurrentUser();\r\n  return (\r\n    <Route\r\n      {...rest}\r\n      render={(props) =>\r\n        currentUser ? (\r\n          <Component {...props} />\r\n        ) : (\r\n          <Redirect\r\n            to={{\r\n              pathname: \"/signin\",\r\n              state: { from: props.location },\r\n            }}\r\n          />\r\n        )\r\n      }\r\n    />\r\n  );\r\n}\r\n\r\n/**\r\n * Redirects authenticated users away from certain routes (e.g. signin/signup)\r\n * back to homepage.\r\n */\r\nfunction RedirectIfAuthenticated({ component: Component, ...rest }) {\r\n  const currentUser = useCurrentUser();\r\n  return (\r\n    <Route\r\n      {...rest}\r\n      render={(props) =>\r\n        !currentUser ? (\r\n          <Component {...props} />\r\n        ) : (\r\n          <Redirect to=\"/\" />\r\n        )\r\n      }\r\n    />\r\n  );\r\n}\r\n\r\n/**\r\n * Simple 404 Not Found page component\r\n */\r\nfunction NotFound() {\r\n  return (\r\n    <div style={{ padding: \"2rem\", textAlign: \"center\" }}>\r\n      <h2>404 - Page Not Found</h2>\r\n      <p>The page you requested does not exist.</p>\r\n    </div>\r\n  );\r\n}\r\n\r\nfunction App() {\r\n  return (\r\n    <CurrentUserProvider>\r\n      <UserDataProvider>\r\n        <div className={styles.App}>\r\n          {/* Navigation Bar present on all pages */}\r\n          <NavBar />\r\n          <Container className={styles.Main}>\r\n            <Switch>\r\n              {/* Public posts listing routes */}\r\n              <Route\r\n                exact\r\n                path=\"/\"\r\n                render={() => (\r\n                  <PostsPage message=\"No results found. Adjust the search keyword.\" />\r\n                )}\r\n              />\r\n              <Route\r\n                exact\r\n                path=\"/feed\"\r\n                render={() => (\r\n                  <PostsPage\r\n                    message=\"No results found. Adjust the search keyword or follow a user.\"\r\n                    filter=\"followed\"\r\n                  />\r\n                )}\r\n              />\r\n              <Route\r\n                exact\r\n                path=\"/liked\"\r\n                render={() => (\r\n                  <PostsPage\r\n                    message=\"No results found. Adjust the search keyword or like a post.\"\r\n                    filter=\"liked\"\r\n                  />\r\n                )}\r\n              />\r\n\r\n              {/* Redirect signed-in users away from signin/signup */}\r\n              <RedirectIfAuthenticated exact path=\"/signin\" component={SignInForm} />\r\n              <RedirectIfAuthenticated exact path=\"/signup\" component={SignUpForm} />\r\n\r\n              {/* Protected routes - only for logged in users */}\r\n              <ProtectedRoute exact path=\"/posts/create\" component={PostCreateForm} />\r\n              <ProtectedRoute exact path=\"/posts/:id/edit\" component={PostEditForm} />\r\n              <ProtectedRoute exact path=\"/users/:id/edit/username\" component={UsernameForm} />\r\n              <ProtectedRoute exact path=\"/users/:id/edit/password\" component={UserPasswordForm} />\r\n              <ProtectedRoute exact path=\"/users/:id/edit\" component={UserEditForm} />\r\n\r\n              {/* Public routes */}\r\n              <Route exact path=\"/posts/:id\" component={PostPage} />\r\n              <Route exact path=\"/users/:id\" component={UserPage} />\r\n\r\n              {/* 404 fallback */}\r\n              <Route component={NotFound} />\r\n            </Switch>\r\n          </Container>\r\n        </div>\r\n      </UserDataProvider>\r\n    </CurrentUserProvider>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from \"react\";\r\nimport Alert from \"react-bootstrap/Alert\";\r\nimport { useAlert } from \"../contexts/AlertContext\";\r\n\r\nconst AlertDisplay = () => {\r\n    const { alerts, removeAlert } = useAlert();\r\n\r\n    return (\r\n        <div\r\n            style={{\r\n                position: \"fixed\",\r\n                top: 70,\r\n                right: 20,\r\n                zIndex: 1050,\r\n                minWidth: 300,\r\n            }}\r\n        >\r\n            {alerts.map(({ id, message, variant }) => (\r\n                <Alert\r\n                    key={id}\r\n                    variant={variant}\r\n                    onClose={() => removeAlert(id)}\r\n                    dismissible\r\n                >\r\n                    {message}\r\n                </Alert>\r\n            ))}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default AlertDisplay;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport App from \"./App\";\r\nimport reportWebVitals from \"./reportWebVitals\";\r\nimport { BrowserRouter as Router } from \"react-router-dom\";\r\nimport { CurrentUserProvider } from \"./contexts/CurrentUserContext\";\r\nimport { UserDataProvider } from \"./contexts/UserDataContext\";\r\nimport { AlertProvider } from \"./contexts/AlertContext\";\r\nimport AlertDisplay from \"./components/AlertDisplay\";\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Router>\r\n      <CurrentUserProvider>\r\n        <UserDataProvider>\r\n          <AlertProvider>\r\n            <AlertDisplay />\r\n            <App />\r\n          </AlertProvider>\r\n        </UserDataProvider>\r\n      </CurrentUserProvider>\r\n    </Router>\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Row\":\"SignInUpForm_Row__35dpM\",\"Input\":\"SignInUpForm_Input__1lB2E\",\"Header\":\"SignInUpForm_Header__GI0pL\",\"Link\":\"SignInUpForm_Link__1yRUf\",\"Container\":\"SignInUpForm_Container__3m1ED\",\"SignInCol\":\"SignInUpForm_SignInCol__1SydU\",\"SignUpCol\":\"SignInUpForm_SignUpCol__2SJnI\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"NavBar\":\"NavBar_NavBar__2YT7V\",\"NavLink\":\"NavBar_NavLink__3rnyW\",\"Active\":\"NavBar_Active__1MQRy\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"DropdownMenu\":\"MoreDropdown_DropdownMenu__2yU44\",\"DropdownItem\":\"MoreDropdown_DropdownItem__nx1p5\",\"DropdownToggle\":\"MoreDropdown_DropdownToggle__25VvA\",\"Absolute\":\"MoreDropdown_Absolute__3EQ-g\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Form\":\"CommentCreateEditForm_Form__3oB5H\",\"Button\":\"CommentCreateEditForm_Button__rLi4-\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Post\":\"Post_Post__1L3Qu\",\"Heart\":\"Post_Heart__2s88C\",\"HeartOutline\":\"Post_HeartOutline__Brq-Z\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Container\":\"PostCreateEditForm_Container__1kRIO\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Author\":\"Comment_Author__2oH9B\",\"Date\":\"Comment_Date__2NTU3\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"SearchBar\":\"PostsPage_SearchBar__N06WU\",\"SearchIcon\":\"PostsPage_SearchIcon__2uPqj\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Avatar\":\"Avatar_Avatar__28z96\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Asset\":\"Asset_Asset__2-QcN\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"WordBreak\":\"User_WordBreak__4ri_F\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"ProfilePicture\":\"UserPage_ProfilePicture__DqOAi\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Button\":\"Button_Button__1Hx1S\",\"Wide\":\"Button_Wide__hPrmt\",\"Blue\":\"Button_Blue__2PttK\",\"BlueOutline\":\"Button_BlueOutline__3ZnJG\",\"Bright\":\"Button_Bright__FGIXu\",\"Black\":\"Button_Black__-SJKz\",\"BlackOutline\":\"Button_BlackOutline__v9BnJ\",\"uploadButton\":\"Button_uploadButton__35bzt\"};"],"sourceRoot":""}